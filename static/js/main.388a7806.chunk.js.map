{"version":3,"sources":["MintButton.tsx","img/poweredby.png","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts","connection.tsx"],"names":["CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","isEnded","isActive","isSoldOut","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","isVerifying","setIsVerifying","useEffect","GatewayStatus","COLLECTING_USER_INFORMATION","ACTIVE","console","log","disabled","state","onClick","a","gatekeeper","variant","CircularProgress","goLiveDate","cluster","process","toString","splTokenName","WalletContainer","div","WalletAmount","Wallet","ul","ConnectButton","WalletMultiButton","NFT","Paper","Card","MintButtonContainer","SolExplorerLink","MainContainer","MintContainer","DesContainer","Price","Chip","Image","img","BorderLinearProgress","LinearProgress","Home","props","balance","setBalance","setIsMinting","setIsActive","solanaExplorerLink","setSolanaExplorerLink","itemsAvailable","setItemsAvailable","itemsRedeemed","setItemsRedeemed","itemsRemaining","setItemsRemaining","setIsSoldOut","payWithSplToken","setPayWithSplToken","price","setPrice","priceLabel","setPriceLabel","whitelistPrice","setWhitelistPrice","whitelistEnabled","setWhitelistEnabled","isBurnToken","setIsBurnToken","whitelistTokenBalance","setWhitelistTokenBalance","setIsEnded","endDate","setEndDate","isPresale","setIsPresale","isWLOnly","setIsWLOnly","open","message","severity","undefined","alertState","setAlertState","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","wallet","useWallet","setCandyMachine","rpcUrl","rpcHost","anchorWallet","useMemo","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","connection","Connection","candyMachineId","getCandyMachineState","cndy","divider","Array","join","slice","tokenMint","toNumber","LAMPORTS_PER_SOL","whitelistMintSettings","mode","burnEveryTime","presale","discountPrice","getAtaForMint","mint","getTokenAccountBalance","tokenBalance","value","uiAmount","error","endSettings","endSettingType","date","toDate","number","Date","getTime","amount","limit","Math","min","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","expireOnUse","Error","hideDuration","startsWith","displaySuccess","mintPublicKey","qty","remaining","throwConfetti","confetti","particleCount","spread","origin","y","beforeTransactions","afterTransactions","connected","program","createAccountsForMint","setupMint","status","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","setupState","anchor","Keypair","generate","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","msg","code","indexOf","getBalance","toLocaleString","href","src","Powered","style","position","bottom","right","maxWidth","alt","elevation","label","now","onMount","completed","onComplete","renderer","days","hours","minutes","PublicKey","CANDY_MACHINE_PROGRAM","gatekeeperNetwork","clusterUrl","options","autoShowModal","seconds","target","Snackbar","autoHideDuration","onClose","Alert","require","e","getCandyMachineId","network","theme","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolflareWebWallet","getSolletWallet","getSolletExtensionWallet","getSolongWallet","getLedgerWallet","getSafePalWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","done","slot","confirmations","Promise","resolve","reject","setTimeout","getSignatureStatuses","signatureStatuses","sleep","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","fetchIdl","idl","account","fetch","id","authority","isWhitelistOnly","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","userTokenAccountAddress","signers","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","sendTransactions","SequenceType","StopOnFailure","txs","userTokenAccount","userPayingAccountAddress","remainingAccounts","push","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","map","rm","toBase58","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","t","mintTxn","ms","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","partiallySignedTransactions","filter","signatures","find","sig","equals","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","all","result","getUnixTs","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","simulateResult","simulateTransaction","logs","line","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","args","encoding","_rpcRequest","res","subId","onSignature","context","removeSignatureListener"],"mappings":"2pBAQaA,GAAYC,kBAAOC,KAAPD,CAAH,iMAQTE,GAAa,SAAC,GAcpB,IAbwBC,EAazB,EAbyBA,OACAC,EAYzB,EAZyBA,aACAC,EAWzB,EAXyBA,UACAC,EAUzB,EAVyBA,QACAC,EASzB,EATyBA,SACAC,EAQzB,EARyBA,UAQzB,EAC2CC,uBAAtCC,EADL,EACKA,oBAAqBC,EAD1B,EAC0BA,cAD1B,EAE4BC,oBAAS,GAFrC,mBAEKC,EAFL,KAEcC,EAFd,OAGoCF,oBAAS,GAH7C,mBAGKG,EAHL,KAGkBC,EAHlB,KAiBF,OAZAC,qBAAU,WACND,GAAe,GACXL,IAAkBO,gBAAcC,6BAA+BN,EAE/DG,GAAe,GACRL,IAAkBO,gBAAcE,QAAUP,IACjDQ,QAAQC,IAAI,kCACZnB,IACAW,GAAW,MAEhB,CAACH,EAAeE,EAASC,EAAYX,IAGpC,eAACJ,GAAD,CACIwB,SACIV,IAAO,OACPT,QADO,IACPA,OADO,EACPA,EAAcoB,MAAMhB,YACpBA,GACAH,GACAC,IACCC,GACDQ,EAEJU,QAAO,sBAAE,sBAAAC,EAAA,0DACDnB,KAAQ,OAAIH,QAAJ,IAAIA,OAAJ,EAAIA,EAAcoB,MAAMG,aAAchB,IAAkBO,gBAAcE,OAD7E,uBAEDC,QAAQC,IAAI,4BACZR,GAAW,GAHV,SAIKJ,IAJL,qCAMDW,QAAQC,IAAI,cANX,UAOKnB,IAPL,4CAUTyB,QAAQ,YApBZ,SAsBMxB,GAEc,OAAZA,QAAY,IAAZA,OAAA,EAAAA,EAAcoB,MAAMhB,YAAaA,EACjC,WACAD,EACAQ,EAAc,eACVV,GAAaQ,EACT,eAACgB,GAAA,EAAD,IAEA,OAERvB,EAAU,SAAuB,OAAZF,QAAY,IAAZA,OAAA,EAAAA,EAAcoB,MAAMM,YACzC,OAEA,cAbA,mBCvED,OAA0B,sC,SCgCnCC,GAAUC,eAAsCC,WAEhDC,GAAwH,QAExHC,GAAkBnC,UAAOoC,IAAV,qHAOfC,GAAerC,UAAOoC,IAAV,kxBA0BZE,GAAStC,UAAOuC,GAAV,4EAMNC,GAAgBxC,kBAAOyC,IAAPzC,CAAH,sIAOb0C,GAAM1C,kBAAO2C,IAAP3C,CAAH,4PASH4C,GAAO5C,kBAAO2C,IAAP3C,CAAH,gNAYJ6C,GAAsB7C,UAAOoC,IAAV,mjBAyBnBU,GAAkB9C,UAAO0B,EAAV,iXAgBfqB,GAAgB/C,UAAOoC,IAAV,wOAYbY,GAAgBhD,UAAOoC,IAAV,2HAQba,GAAejD,UAAOoC,IAAV,0GAOZc,GAAQlD,kBAAOmD,IAAPnD,CAAH,6KAQLoD,GAAQpD,UAAOqD,IAAV,yIAOLC,GAAuBtD,kBAAOuD,IAAPvD,CAAH,ofAkkBXwD,GAxiBF,SAACC,GAAsB,IAAD,UACD7C,qBADC,mBACxB8C,EADwB,KACfC,EADe,OAEG/C,oBAAS,GAFZ,mBAExBP,EAFwB,KAEbuD,EAFa,OAGChD,oBAAS,GAHV,mBAGxBL,EAHwB,KAGdsD,EAHc,OAIqBjD,mBAAiB,IAJtC,mBAIxBkD,EAJwB,KAIJC,EAJI,OAKanD,mBAAS,GALtB,mBAKxBoD,EALwB,KAKRC,EALQ,OAMWrD,mBAAS,GANpB,mBAMxBsD,EANwB,KAMTC,EANS,OAOavD,mBAAS,GAPtB,mBAOxBwD,EAPwB,KAORC,EAPQ,OAQGzD,oBAAS,GARZ,mBAQxBJ,EARwB,KAQb8D,EARa,OASe1D,oBAAS,GATxB,mBASxB2D,EATwB,KASPC,EATO,OAUL5D,mBAAS,GAVJ,oBAUxB6D,GAVwB,MAUjBC,GAViB,SAWK9D,mBAAiB,OAXtB,qBAWxB+D,GAXwB,MAWZC,GAXY,SAYahE,mBAAS,GAZtB,qBAYxBiE,GAZwB,MAYRC,GAZQ,SAaiBlE,oBAAS,GAb1B,qBAaxBmE,GAbwB,MAaNC,GAbM,SAcOpE,oBAAS,GAdhB,qBAcxBqE,GAdwB,MAcXC,GAdW,SAe2BtE,mBAAS,GAfpC,qBAexBuE,GAfwB,MAeDC,GAfC,SAgBDxE,oBAAS,GAhBR,qBAgBxBN,GAhBwB,MAgBf+E,GAhBe,SAiBDzE,qBAjBC,qBAiBxB0E,GAjBwB,MAiBfC,GAjBe,SAkBG3E,oBAAS,GAlBZ,qBAkBxB4E,GAlBwB,MAkBbC,GAlBa,SAmBC7E,oBAAS,GAnBV,qBAmBxB8E,GAnBwB,MAmBdC,GAnBc,SAqBK/E,mBAAqB,CACrDgF,MAAM,EACNC,QAAS,GACTC,cAAUC,IAxBiB,qBAqBxBC,GArBwB,MAqBZC,GArBY,SA2BSrF,oBAAS,GA3BlB,qBA2BxBsF,GA3BwB,MA2BVC,GA3BU,SA4BCvF,qBA5BD,qBA4BxBwF,GA5BwB,MA4BdC,GA5Bc,MA8BzBC,GAASC,cA9BgB,GA+BS3F,qBA/BT,qBA+BxBR,GA/BwB,MA+BVoG,GA/BU,MAiCzBC,GAAShD,EAAMiD,QAGfC,GAAeC,mBAAQ,WACzB,GACKN,IACAA,GAAOO,WACPP,GAAOQ,qBACPR,GAAOS,gBAKZ,MAAO,CACHF,UAAWP,GAAOO,UAClBC,oBAAqBR,GAAOQ,oBAC5BC,gBAAiBT,GAAOS,mBAE7B,CAACT,KAEEU,GAA2BC,sBAAW,sBACxC,8EAAAvF,EAAA,yDAAOwF,EAAP,+BAAgC,YACvBP,GADT,oDAKUQ,EAAa,IAAIC,aAAW3D,EAAMiD,QAASQ,IAE7CzD,EAAM4D,eAPd,0CAS+BC,aACfX,GACAlD,EAAM4D,eACNF,GAZhB,UASkBI,EATlB,OAeYf,GAAgBe,GAChBtD,EAAkBsD,EAAK/F,MAAMwC,gBAC7BK,EAAkBkD,EAAK/F,MAAM4C,gBAC7BD,EAAiBoD,EAAK/F,MAAM0C,eAExBsD,EAAU,EAEVA,IAAY,IAAM,IAAIC,MA/PsF,GA+PtEC,KAAK,KAAKC,QAAU,KAI1DJ,EAAK/F,MAAMoG,WACXpD,GAAmB,GAGnBI,GAAc1C,IACdwC,GAAS6C,EAAK/F,MAAMiD,MAAMoD,WAAaL,GACvC1C,GAAkByC,EAAK/F,MAAMiD,MAAMoD,WAAaL,KAEhD9C,GAAS6C,EAAK/F,MAAMiD,MAAMoD,WAAaC,oBACvChD,GAAkByC,EAAK/F,MAAMiD,MAAMoD,WAAaC,sBAKhDP,EAAK/F,MAAMuG,sBAxC3B,wBAyCgB/C,IAAoB,GACpBE,GAAeqC,EAAK/F,MAAMuG,sBAAsBC,KAAKC,eACrDxC,GAAa8B,EAAK/F,MAAMuG,sBAAsBG,SAC9CvC,IAAaH,IAAgE,OAAnD+B,EAAK/F,MAAMuG,sBAAsBI,eAEJ,OAAnDZ,EAAK/F,MAAMuG,sBAAsBI,eAA0BZ,EAAK/F,MAAMuG,sBAAsBI,gBAAkBZ,EAAK/F,MAAMiD,QACrH8C,EAAK/F,MAAMoG,UACX9C,IAAkB,UAAAyC,EAAK/F,MAAMuG,sBAAsBI,qBAAjC,eAAgDN,YAAaL,GAE/E1C,IAAkB,UAAAyC,EAAK/F,MAAMuG,sBAAsBI,qBAAjC,eAAgDN,YAAaC,qBAInFpE,EAAU,EAtD9B,eAyD8BD,EAAM0D,WAzDpC,UA2DsCiB,aACFb,EAAK/F,MAAMuG,sBAAsBM,KACjC1B,GAAaE,WA7DjD,2BA+D8B,GA/D9B,eAyD+CyB,uBAzD/C,wBAwD0BC,EAxD1B,OAkEoB7E,GAAsB,OAAZ6E,QAAY,IAAZA,GAAA,UAAAA,EAAcC,aAAd,eAAqBC,WAAY,EAlE/D,mDAoEoBpH,QAAQqH,MAAR,MACAhF,EAAU,EArE9B,QAuEmC,cAAfwD,GACA9B,GAAyB1B,GAE7BG,EAAY2B,KAAclF,IAAWoD,EAAU,GA1E/D,wBA6EgBsB,IAAoB,GA7EpC,eAiFY,OAAIuC,QAAJ,IAAIA,GAAJ,UAAIA,EAAM/F,MAAMmH,mBAAhB,aAAI,EAAyBC,eAAeC,QACxCtD,GAAWuD,aAAOvB,EAAK/F,MAAMmH,YAAYI,SAErCxB,EAAK/F,MAAMmH,YAAYI,OAAOlB,YAC9B,IAAImB,MAAOC,UAAY,MAEvB5D,IAAW,GACXxB,GAAY,MAIpB,OAAI0D,QAAJ,IAAIA,GAAJ,UAAIA,EAAM/F,MAAMmH,mBAAhB,aAAI,EAAyBC,eAAeM,SACpCC,EAAQC,KAAKC,IACb9B,EAAK/F,MAAMmH,YAAYI,OAAOlB,WAC9BN,EAAK/F,MAAMwC,gBAEfC,EAAkBkF,GACd5B,EAAK/F,MAAM0C,cAAgBiF,EAC3B9E,EAAkB8E,EAAQ5B,EAAK/F,MAAM0C,gBAErCG,EAAkB,GAClBkD,EAAK/F,MAAMhB,WAAY,EACvB6E,IAAW,KAGfhB,EAAkBkD,EAAK/F,MAAM4C,gBAG7BmD,EAAK/F,MAAMhB,WACXqD,GAAY,GA9G5B,UAiH0CyF,aAAiB7F,EAAM4D,gBAjHjE,2CAiHmBkC,EAjHnB,eAkH+CpC,EAAWqC,eAC1CD,GAnHhB,QAkHkBE,EAlHlB,OAsHkBC,EACF,KACGD,GAAwBlC,EAAK/F,MAAMmI,gBAAkB,IAAM,IAC7DpC,EAAK/F,MAAMoG,UAAY,GAAK,IAC5BL,EAAK/F,MAAMuG,sBAAwB,GAAK,KACxC,UAAAR,EAAK/F,MAAMuG,6BAAX,mBAAkCC,YAAlC,eAAwCC,eAAgB,GAAK,IAC7DV,EAAK/F,MAAMG,WAAa,GAAK,KAC7B,UAAA4F,EAAK/F,MAAMG,kBAAX,eAAuBiI,aAAc,GAAK,GAE/CzD,GAAgBuD,EAAc,MA/H1C,kDAiIgB,gBAAaG,MAET,KAAEhE,UAAF,iCAAwCpC,EAAM4D,gBAE9CpB,GAAc,CACVL,MAAM,EACNC,QAAQ,uEAAD,OAAyEpC,EAAM4D,eAA/E,wBAA6G5D,EAAMiD,QAAnH,yHACPZ,SAAU,QACVgE,aAAc,OAGlB,KAAEjE,QAAQkE,WAAW,qCAErB9D,GAAc,CACVL,MAAM,EACNC,QAAQ,gDAAD,OAAkDpC,EAAMiD,QAAxD,0IACPZ,SAAU,QACVgE,aAAc,OAItB7D,GAAc,CACVL,MAAM,EACNC,QAAQ,GAAD,aACPC,SAAU,QACVgE,aAAc,OAGtBzI,QAAQC,IAAR,MA7JZ,gCAgKQ2E,GAAc,CACVL,MAAM,EACNC,QAAQ,iIACRC,SAAU,QACVgE,aAAc,OApK1B,kEAwKA,CAACnD,GAAclD,EAAM4D,eAAgB5D,EAAMiD,QAASpG,GAASkF,GAAW/B,EAAM0D,aAyBlF,SAAS6C,GAAeC,GAA4C,IAAxBC,EAAuB,uDAAT,EAClDC,EAAY/F,EAAiB8F,EAGjC,GAFA7F,EAAkB8F,GAClB7F,EAA2B,IAAd6F,GACTlF,IAAeE,IAAyBA,GAAwB,EAAG,CACnE,IAAIzB,EAAUyB,GAAwB+E,EACtC9E,GAAyB1B,GACzBG,EAAY2B,KAAclF,IAAWoD,EAAU,GAEnD2C,QAAYN,GACZ5B,EAAiBD,EAAgBgG,IAC5B3F,GAAmBb,GAAWA,EAAU,GACzCC,EAAWD,GAAYqB,GAAmBF,GAAiBJ,IAASyF,EAjOlD,MAmOtBnG,EAAkC,WAAZhC,IAAoC,YAAZA,GACvC,4BAA8BkI,EAAgB,YAAclI,GAC5D,4BAA8BkI,GACrCrG,GAAa,GACbwG,KAGJ,SAASA,KACLC,YAAS,CACLC,cAAe,IACfC,OAAQ,GACRC,OAAQ,CAACC,EAAG,MAIpB,IAAMtK,GAAM,uCAAG,8DAAAuB,EAAA,yDACXgJ,EADW,+BACyB,GACpCC,EAFW,+BAEwB,GAFxB,WAKHrE,GAAOsE,YAAP,OAAoBxK,SAApB,IAAoBA,QAApB,EAAoBA,GAAcyK,UAAWvE,GAAOO,WALjD,oBAMHjD,GAAa,IAETsC,SAA6BH,IAAbK,GARjB,wBASCH,GAAc,CACVL,MAAM,EACNC,QAAS,4CACTC,SAAU,SAZf,SAcmBgF,aACd1K,GACAkG,GAAOO,WAhBZ,UAcCkE,EAdD,OAkBKC,EAAc,CAACC,KAAK,IACpBF,EAAUG,YAnBf,kCAoBoBC,aACXJ,EAAUG,YACVzH,EAAM2H,UACN3H,EAAM0D,YACN,GAxBT,QAoBK6D,EApBL,mBA2BKA,GAAWA,EAAOC,IA3BvB,iBA4BK5E,GAAY0E,GACZ9E,GAAc,CACVL,MAAM,EACNC,QACI,qEACJC,SAAU,SAjCnB,+BAoCKG,GAAc,CACVL,MAAM,EACNC,QAAS,iCACTC,SAAU,UAvCnB,kCA6CGuF,EA7CH,UA6CgBN,SA7ChB,QA6C6B3E,GAC1BiC,EA9CH,iBA8CUgD,QA9CV,IA8CUA,OA9CV,EA8CUA,EAAYhD,YA9CtB,QA8C8BiD,IAAYC,QAAQC,WA9ClD,UA+CoBC,aACnBrL,GACAkG,GAAOO,UACPwB,EACAqC,EACAC,EACAU,GArDD,WA+CCK,EA/CD,OAwDCV,EAAc,CAACC,KAAK,GACpBU,EAAiB,MACjBD,EA1DD,kCA2DgBP,aACXO,EAAWE,SACXnI,EAAM2H,UACN3H,EAAM0D,YACN,GA/DL,eA2DC6D,EA3DD,iBAmEW5K,GAAayK,QAAQgB,SAAS1E,WAAWqC,eAC3CkC,EAAWI,YACX,aArET,QAkECH,EAlED,OAuECtK,QAAQC,IAAI,sBAAuBqK,GAvEpC,QA0ECX,IAAWA,EAAOC,KAAOU,GACzB1F,GAAc,CACVL,MAAM,EACNC,QAAS,mCACTC,SAAU,YAIdkE,GAAe3B,EAAKxB,WACpBG,GAAyB,cAClBgE,IAAWA,EAAOC,KACzBhF,GAAc,CACVL,MAAM,EACNC,QACI,kLACJC,SAAU,QACVgE,aAAc,MAElB9C,OAEAf,GAAc,CACVL,MAAM,EACNC,QAAS,iCACTC,SAAU,UAEdkB,MAnGD,0DAuGHnB,EAAU,KAAMkG,KAAO,oCACtB,KAAMA,IAUY,MAAf,KAAMC,KACNnG,EAAO,YACe,MAAf,KAAMmG,OACbnG,EAAO,sCAZN,KAAMA,QAEA,KAAMA,QAAQoG,QAAQ,WACtB,KAAMpG,QAAQoG,QAAQ,SAC7BpG,EAAO,YACA,KAAMA,QAAQoG,QAAQ,WAC7BpG,EAAO,yDALPA,EAAU,yCAelBI,GAAc,CACVL,MAAM,EACNC,UACAC,SAAU,UA5HP,yBA+HPlC,GAAa,GA/HN,6EAAH,qDAwJZ,OArBA3C,qBAAU,WACN,sBAAC,4BAAAS,EAAA,0DACOiF,GADP,gCAE6BlD,EAAM0D,WAAW+E,WAAWvF,GAAcE,WAFvE,OAEanD,EAFb,OAGOC,EAAWD,EAAUoE,oBAH5B,0CAAD,KAMD,CAACnB,GAAclD,EAAM0D,aAExBlG,qBAAU,WACN+F,OACD,CACCL,GACAlD,EAAM4D,eACN5D,EAAM0D,WACN7G,GACAkF,GACAwB,KAKA,kCACI,gBAACjE,GAAD,WACI,gBAACZ,GAAD,WACI,eAACG,GAAD,UACKgE,GACG,gBAACjE,GAAD,YAAgBqB,GAAW,GAAGyI,iBAA9B,OAAmD,eAAC3J,GAAD,OACnD,eAACA,GAAD,+BAER,oBAAG4J,KAAK,+BAAR,SACA,sBAAKC,IAAKC,GAASC,MAAO,CAACC,SAAU,QAASC,OAAQ,MAAOC,MAAO,MAAOC,SAAU,SAAUC,IAAI,wBAGvG,wBACA,eAAC5J,GAAD,UACI,eAACC,GAAD,UACI,gBAACP,GAAD,CAAKmK,UAAW,EAAhB,UACI,iDACA,wBACA,iCAAK,eAAC3J,GAAD,CACD4J,MAAOvM,GAAYwE,IAAqBI,GAAwB,EAAMN,GAAiB,IAAMF,GAAeF,GAAQ,IAAME,KAAc,eAACvB,GAAD,CACxIiJ,IAAI,gBACJO,IAAI,mBACR,wBACCtG,IAAU/F,GAAYwE,IAAqBI,GAAwB,GAAMF,IACxE,2CAAaE,GAAb,YACQA,GAAwB,EAAI,SAAW,QAD/C,OAEDmB,IAAU/F,GAAYwE,IAAqBI,GAAwB,IAAOF,IACzE,2EACDqB,IAAU/F,GAAY+E,IAAW0D,KAAK+D,MAAQzH,GAAQ2D,WACrD,eAAC,IAAD,CACEJ,KAAMC,aAAM,OAAC1I,SAAD,IAACA,IAAD,UAACA,GAAcoB,aAAf,iBAAC,EAAqBmH,mBAAtB,aAAC,EAAkCI,QAC/CiE,QAAS,qBAAEC,WAA4B5H,IAAW,IAClD6H,WAAY,WACR7H,IAAW,IAEf8H,SAvOC,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAC7BP,EAAQ,GAQZ,OAPIM,EAAO,IACPN,GAASM,EAAO,UAEhBC,EAAQ,IACRP,GAASO,EAAQ,WAErBP,GAR0D,EAAlBQ,QAQpB,EAAK,yBAErB,+BAAK,8BAAKR,SA+NOxG,IAAU/F,GACT,kDAAoB2D,EAApB,MAAsCF,KACvCsC,IAAU/F,GAAY,eAAC+C,GAAD,CAAsB1B,QAAQ,cACR4G,MAAO,IAAwB,IAAjBpE,EAAuBJ,IAClF,wBACA,eAACnB,GAAD,UACMtC,GAAaD,MAAd,OAAyBF,SAAzB,IAAyBA,QAAzB,EAAyBA,GAAcoB,MAAMM,aAAgB4D,MAAYP,GAAwB,GAS7FmB,IAEKZ,IAAYP,GAAwB,GAC1B,OAAZ/E,SAAY,IAAZA,QAAA,EAAAA,GAAcoB,MAAMG,aACpB2E,GAAOO,WACPP,GAAOS,gBACH,eAAC,kBAAD,CACIT,OAAQ,CACJO,UACIP,GAAOO,WACP,IAAI0G,YAAUC,MAElBzG,gBAAiBT,GAAOS,iBAI5B0G,kBAAiB,OACbrN,SADa,IACbA,IADa,UACbA,GAAcoB,aADD,iBACb,EAAqBG,kBADR,aACb,EAAiC8L,kBAGrCC,WAAYjH,GACZ1E,QAASA,GACT4L,QAAS,CAACC,eAAe,GAhB7B,SAkBI,eAAC,GAAD,CACIxN,aAAcA,GACdC,UAAWA,EACXE,SAAUA,EACVD,QAASA,GACTE,UAAWA,EACXL,OAAQA,OAIhB,eAAC,GAAD,CACIC,aAAcA,GACdC,UAAWA,EACXE,SAAUA,EACVD,QAASA,GACTE,UAAWA,EACXL,OAAQA,KAIhB,mDA3CA,eAACqC,GAAD,6BATJ,eAAC,IAAD,CACIqG,KAAMC,aAAM,OAAC1I,SAAD,IAACA,QAAD,EAACA,GAAcoB,MAAMM,YACjCkL,QAAS,qBAAEC,WAA4BpJ,GAAavD,KACpD4M,WAAY,WACRrJ,GAAavD,KAEjB6M,SA9PJ,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASO,EAAkB,EAAlBA,QACpD,OACI,iCAAK,gBAACjL,GAAD,CAAMiK,UAAW,EAAjB,UAAoB,8BAAKO,IAAzB,UAA8C,gBAACxK,GAAD,CAAMiK,UAAW,EAAjB,UAAoB,8BAAKQ,IAAzB,WACnC,gBAACzK,GAAD,CAAMiK,UAAW,EAAjB,UAAoB,8BAAKS,IAAzB,UAAiD,gBAAC1K,GAAD,CAAMiK,UAAW,EAAjB,UAC7D,8BAAKgB,IADwD,kBA4SjD,wBACCvH,IAAU/F,GAAYuD,GACrB,eAAChB,GAAD,CAAiBsJ,KAAMtI,EAAoBgK,OAAO,SAAlD,uCAMlB,eAACC,EAAA,EAAD,CACInI,KAAMI,GAAWJ,KACjBoI,iBAAkB,IAClBC,QAAS,kBAAMhI,GAAc,2BAAID,IAAL,IAAiBJ,MAAM,MAHvD,SAKI,eAACsI,GAAA,EAAD,CACID,QAAS,kBAAMhI,GAAc,2BAAID,IAAL,IAAiBJ,MAAM,MACnDE,SAAUE,GAAWF,SAFzB,SAIKE,GAAWH,gBCxtBhCsI,EAAQ,KAER,IAaM9G,GAboB,WACtB,IAKI,OAJuB,IAAIiE,IAAYiC,UACnCvL,gDAIN,MAAOoM,GAEL,YADA/M,QAAQC,IAAI,qCAAsC8M,IAKnCC,GAEjBC,GAAUtM,eAEV0E,GAAU1E,sCACVmF,GAAa,IAAImE,IAAYlE,WACrBV,IAGR6H,GAAQC,YAAY,CACtBC,QAAS,CACLC,KAAM,QAEVC,UAAW,CACPC,cAAe,CACXC,KAAM,CACFC,eAAgB,eAGxBC,UAAW,CACPF,KAAM,CACFG,mBAAejJ,EACfkJ,QAAS,aAEbC,UAAW,CACPC,YAAa,GAEjBC,QAAS,CACLC,WAAY,OA+CbC,GAzCH,WAEV,IAAMC,EAAW3I,mBAAQ,kBAAM4I,wBAAclB,MAAU,IAK/CmB,EAAU7I,mBACZ,iBAAM,CACF8I,cACAC,cACAC,cACAC,cACAC,YAAgB,CAAExB,aAClByB,YAAyB,CAAEzB,aAC3B0B,cACAC,cACAC,iBAEJ,IAGN,OACI,eAACC,EAAA,EAAD,CAAe5B,MAAOA,GAAtB,SACE,eAAC6B,EAAA,EAAD,CAAoBb,SAAUA,EAA9B,SACE,eAACc,EAAA,EAAD,CAAgBZ,QAASA,EAASa,aAAa,EAA/C,SACE,eAAC,IAAD,UACE,eAAC,GAAD,CACEjJ,eAAgBA,GAChBF,WAAYA,GACZiE,UAAWmF,IACX7J,QAASA,GACT4H,QAASA,cChGVkC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,M,oSCAa1H,G,KAAS,SAACN,GACrB,GAAKA,EAIL,OAAO,IAAIQ,KAAwB,IAAnBR,EAAMX,cA0BXyJ,GAvBU,IAAIC,KAAKC,aAAa,QAAS,CACpDjF,MAAO,UACPkF,sBAAuB,EACvBC,sBAAuB,IAqBrB,IAAIpG,IAAYiC,UAAU,iDAEjBoE,EAAQ,IAAIrG,IAAYiC,UACjC,+CAGSnF,EAAa,uCAAG,WACzBC,EACAuJ,GAFyB,SAAAlQ,EAAA,sEAId4J,IAAYiC,UAAUsE,mBAC/B,CAACD,EAAME,WAAYC,IAAiBD,WAAYzJ,EAAKyJ,YACrDR,GANuB,mFAAH,wDAUbU,EAAgB,uCAAG,WAC5BvE,GAD4B,SAAA/L,EAAA,sEAGjB4J,IAAYiC,UAAUsE,mBAC/B,CAACpE,EAAkBqE,WAAYG,EAAOC,KAAK,WAC3CP,GAL0B,mFAAH,sDAShBQ,EAAe,uCAAG,WAC3B7L,EACAmH,GAF2B,SAAA/L,EAAA,sEAIhB4J,IAAYiC,UAAUsE,mBAC/B,CACEvL,EAAOwL,WACPG,EAAOC,KAAK,WACZD,EAAOC,KAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAClCzE,EAAkBqE,YAEpBH,GAXyB,mFAAH,0D,2VCvDfnE,EAAwB,IAAIlC,IAAYiC,UACjD,+CAGE6E,EAA4B,IAAI9G,IAAYiC,UAC9C,+CA4CSpC,EAAqC,uCAAG,WACjDkH,EACAC,EACAnL,GAHiD,+BAAAzF,EAAA,6DAIjD6Q,EAJiD,gCAM7CC,GAAO,EACPxH,EAAoD,CACpDyH,KAAM,EACNC,cAAe,EACfzH,IAAK,MAEG,EAZqC,SAalC,IAAI0H,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAAnR,EAAA,sDACvBoR,YAAW,WACHN,IAGJA,GAAO,EACPnR,QAAQC,IAAI,4BACZuR,EAAO,CAAEP,SAAS,OACnBA,GARoB,UAUfE,IAAQD,EAVO,uBAYnB,sBAAC,4BAAA7Q,EAAA,+EAEuCyF,EAAW4L,qBAAqB,CAC5DV,IAHX,OAEaW,EAFb,OAKOhI,EAASgI,GAAqBA,EAAkBxK,MAAM,GACjDgK,IACIxH,EAEMA,EAAOC,KACd5J,QAAQC,IAAI,iBAAkB+Q,EAAMrH,GACpCwH,GAAO,EACPK,EAAO7H,EAAOC,MACND,EAAO0H,eAGfrR,QAAQC,IAAI,wBAAyB+Q,EAAMrH,GAC3CwH,GAAO,EACPI,EAAQ5H,IAJR3J,QAAQC,IAAI,4BAA6B+Q,EAAMrH,GAN/C3J,QAAQC,IAAI,uBAAwB+Q,EAAMrH,IARzD,gDAsBYwH,GACDnR,QAAQC,IAAI,8BAA+B+Q,EAA3C,MAvBX,wDAAD,GAZmB,SAuCbY,EAAM,KAvCO,iEAAZ,yDAbkC,cAajDjI,EAbiD,OAwDjDwH,GAAO,EACPnR,QAAQC,IAAI,mBAAoB0J,GAzDiB,kBA0D1CA,GA1D0C,4CAAH,0DA6D5CkI,EAA0C,SAC5CC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAO,CACT,CAAEC,OAAQJ,EAAOK,UAAU,EAAMC,YAAY,GAC7C,CAAEF,OAAQL,EAAwBM,UAAU,EAAOC,YAAY,GAC/D,CAAEF,OAAQH,EAAeI,UAAU,EAAOC,YAAY,GACtD,CAAEF,OAAQF,EAAqBG,UAAU,EAAOC,YAAY,GAC5D,CACIF,OAAQlI,IAAYqI,cAAcC,UAClCH,UAAU,EACVC,YAAY,GAEhB,CAAEF,OAAQzB,IAAkB0B,UAAU,EAAOC,YAAY,GACzD,CACIF,OAAQlI,IAAYuI,mBACpBJ,UAAU,EACVC,YAAY,IAGpB,OAAO,IAAIpI,IAAYwI,uBAAuB,CAC1CP,OACAK,UAAWtC,IACXyC,KAAM9B,EAAOC,KAAK,OAIb5K,EAAoB,uCAAG,WAChCX,EACAU,EACAF,GAHgC,2BAAAzF,EAAA,6DAK1BmK,EAAW,IAAIP,IAAgBnE,EAAYR,EAAc,CAC3DqN,oBAAqB,cANO,SASd1I,IAAe2I,SAASzG,EAAuB3B,GATjC,cAS1BqI,EAT0B,OAW1BrJ,EAAU,IAAIS,IAAe4I,EAAM1G,EAAuB3B,GAXhC,SAaPhB,EAAQsJ,QAAQ/T,aAAagU,MAAM/M,GAb5B,cAa1B7F,EAb0B,OAc1BwC,EAAiBxC,EAAMuS,KAAK/P,eAAe6D,WAC3C3D,EAAgB1C,EAAM0C,cAAc2D,WACpCzD,EAAiBJ,EAAiBE,EAhBR,kBAkBzB,CACHmQ,GAAIhN,EACJwD,UACArJ,MAAO,CACH8S,UAAW9S,EAAM8S,UACjBtQ,iBACAE,gBACAE,iBACA5D,UAA8B,IAAnB4D,EACX7D,UAAU,EACViF,WAAW,EACX+O,iBAAiB,EACjBzS,WAAYN,EAAMuS,KAAKjS,WACvB0S,SAAUhT,EAAM8E,OAChBsB,UAAWpG,EAAMoG,UACjBjG,WAAYH,EAAMuS,KAAKpS,WACvBgH,YAAanH,EAAMuS,KAAKpL,YACxBZ,sBAAuBvG,EAAMuS,KAAKhM,sBAClC0M,eAAgBjT,EAAMuS,KAAKU,eAC3BhQ,MAAOjD,EAAMuS,KAAKtP,MAClBkF,gBAAiBnI,EAAMuS,KAAKpK,mBAtCJ,4CAAH,0DA2C3B+K,EAAgB,uCAAG,WACrBrM,GADqB,SAAA3G,EAAA,sEAIX4J,IAAYiC,UAAUsE,mBACxB,CACII,EAAOC,KAAK,YACZE,EAA0BN,WAC1BzJ,EAAKyJ,WACLG,EAAOC,KAAK,YAEhBE,GAXa,uCAanB,IAbmB,2CAAH,sDAgBhBuC,EAAW,uCAAG,WAChBtM,GADgB,SAAA3G,EAAA,sEAIN4J,IAAYiC,UAAUsE,mBACxB,CACII,EAAOC,KAAK,YACZE,EAA0BN,WAC1BzJ,EAAKyJ,YAETM,GAVQ,uCAYd,IAZc,2CAAH,sDAeJwC,EAAsB,uCAAG,WAClCxU,GADkC,SAAAsB,EAAA,sEAGrB4J,IAAYiC,UAAUsE,mBAC/B,CAACI,EAAOC,KAAK,iBAAkB9R,EAAa0R,YAC5CtE,GAL8B,mFAAH,sDAStBlE,EAAgB,uCAAG,WAC5BuL,GAD4B,SAAAnT,EAAA,sEAGf4J,IAAYiC,UAAUsE,mBAC/B,CAACI,EAAOC,KAAK,cAAe2C,EAAoB/C,YAChDtE,GALwB,mFAAH,sDAchBsH,EAA+B,uCAAG,WAC3CzM,EACA0M,GAF2C,SAAArT,EAAA,sEAKjC4J,IAAYiC,UAAUsE,mBACxB,CACII,EAAOC,KAAK,YACZE,EAA0BN,WAC1BzJ,EAAKyJ,WACLG,EAAOC,KAAK,wBACZ6C,EAAajD,YAEjBM,GAbmC,uCAezC,IAfyC,2CAAH,wDAwB/BtH,EAAqB,uCAAG,WACjC1K,EACAgT,GAFiC,qBAAA1R,EAAA,6DAI3B2G,EAAOiD,IAAYC,QAAQC,WAJA,SAMvBpD,YAAcC,EAAKxB,UAAWuM,GANP,cAK3B4B,EAL2B,OAO/B,GAEIC,EAAiC,CAAC5M,GATP,KAW7BiD,IAAYqI,cAXiB,KAYbP,EAZa,KAaP/K,EAAKxB,UAbE,KAclBqO,IAAWC,KAdO,UAgBf/U,EAAayK,QAAQgB,SAAS1E,WAAWiO,kCAC3CF,IAAWC,MAjBM,gCAmBdpD,IAnBc,MAYzBsD,WAZyB,KAazBC,iBAbyB,KAczBC,MAdyB,KAezBC,SAfyB,KAmBzB5B,UAnByB,gBAWH6B,cAXG,qBAqB7BC,IAAMC,0BACF5D,IACA1J,EAAKxB,UACL,EACAuM,EACAA,GA1ByB,KA4B7BF,EACI8B,EACA5B,EACAA,EACA/K,EAAKxB,WAhCoB,MAkC7B6O,IAAME,wBACF7D,IACA1J,EAAKxB,UACLmO,EACA5B,EACA,GACA,GA9BFyC,EAV2B,6BA6CvBxN,EA7CuB,MA8CX2M,EA9CW,UAgDnBc,YACF1V,EAAayK,QAAQgB,SAAS1E,WAC9B/G,EAAayK,QAAQgB,SAASvF,OAC9B,CAACuP,GACD,CAACZ,GACDc,IAAaC,cACb,gBACA,eACA,kBAAM,SACNjQ,EACA,GACA,IA3DqB,4BA6D3BkQ,IAAI,GAAG5D,KA7DoB,mBA6C7BhK,KA7C6B,MA8C7B6N,iBA9C6B,MA+C7BhL,YA/C6B,oDAAH,wDAsErBO,EAAY,uCAAG,WACxBrL,EACAgT,EACA/K,GAHwB,mFAAA3G,EAAA,6DAIxBgJ,EAJwB,+BAIY,GACpCC,EALwB,+BAKW,GACnCU,EANwB,gCASdjD,YAAcC,EAAKxB,UAAWuM,GAThB,UAQlB4B,EARkB,OAUtB,IAE+B5U,EAAaoB,MAAMoG,UAZ5B,iCAaXQ,YAAchI,EAAaoB,MAAMoG,UAAWwL,GAbjC,mBAayC,GAbzC,6BAclBA,EAdkB,WAYlB+C,EAZkB,KAgBlBtB,EAAsBzU,EAAaiU,GACnC+B,EAAoB,GACpBP,EAAe,GACfZ,EAAiC,GACvC5T,QAAQC,IAAI,eAAgB+J,GACvBA,EArBmB,wBAsBpB4J,EAAQoB,KAAKhO,GAtBO,KAuBpBwN,EAAaQ,KAvBO,KAuBpBR,EAvBoB,KAyBZvK,IAAYqI,cAzBA,KA0BIP,EA1BJ,KA2BU/K,EAAKxB,UA3Bf,KA4BDqO,IAAWC,KA5BV,UA8BE/U,EAAayK,QAAQgB,SAAS1E,WAAWiO,kCAC3CF,IAAWC,MA/BX,yBAiCGpD,IAjCH,MA0BRsD,WA1BQ,KA2BRC,iBA3BQ,KA4BRC,MA5BQ,KA6BRC,SA7BQ,KAiCR5B,UAjCQ,iBAyBc6B,cAzBd,sBAmCZC,IAAMC,0BACF5D,IACA1J,EAAKxB,UACL,EACAuM,EACAA,GAxCQ,MA0CZF,EACI8B,EACA5B,EACAA,EACA/K,EAAKxB,WA9CG,MAgDZ6O,IAAME,wBACF7D,IACA1J,EAAKxB,UACLmO,EACA5B,EACA,GACA,GAtDQ,6EA4DpBhT,EAAaoB,MAAMG,WA5DC,8BA6DpByU,EA7DoB,UA+DNjE,YACFiB,EACAhT,EAAaoB,MAAMG,WAAW8L,mBAjEtB,wBAmEd,GAnEc,OA8DhB+F,OA9DgB,MAoEhBE,YAAY,EACZD,UAAU,GArEM,MA6DF4C,KA7DE,mBAwEhBjW,EAAaoB,MAAMG,WAAWiI,YAxEd,wBAyEhBwM,EAAkBC,KAAK,CACnB7C,OAAQ7B,IACR+B,YAAY,EACZD,UAAU,IA5EE,MA8EhB2C,EA9EgB,UAgFFpE,YACF5R,EAAaoB,MAAMG,WAAW8L,mBAjF1B,qBAmFV,GAnFU,OA+EZ+F,OA/EY,MAoFZE,YAAY,EACZD,UAAU,GArFE,MA8EE4C,KA9EF,8BAyFpBjW,EAAaoB,MAAMuG,sBAzFC,wBA0FdM,EAAO,IAAIiD,IAAYiC,UACzBnN,EAAaoB,MAAMuG,sBAAsBM,MA3FzB,UA8FUD,YAAcC,EAAM+K,GA9F9B,QA8FdkD,EA9Fc,OA8FsC,GAC1DF,EAAkBC,KAAK,CACnB7C,OAAQ8C,EACR5C,YAAY,EACZD,UAAU,IAGVrT,EAAaoB,MAAMuG,sBAAsBC,KAAKC,gBAC9CmO,EAAkBC,KAAK,CACnB7C,OAAQnL,EACRqL,YAAY,EACZD,UAAU,IAEd2C,EAAkBC,KAAK,CACnB7C,OAAQJ,EACRM,YAAY,EACZD,UAAU,KA9GE,eAmHpBrT,EAAaoB,MAAMoG,YACnBwO,EAAkBC,KAAK,CACnB7C,OAAQ2C,EACRzC,YAAY,EACZD,UAAU,IAEd2C,EAAkBC,KAAK,CACnB7C,OAAQJ,EACRM,YAAY,EACZD,UAAU,KA5HM,UA+HMkB,EAAYtM,EAAKxB,WA/HvB,eA+HlB0P,EA/HkB,iBAgII7B,EAAiBrM,EAAKxB,WAhI1B,eAgIlB2P,EAhIkB,iBAkIyB5B,EAC7CC,GAnIoB,2CAkIjB4B,EAlIiB,KAkIIC,EAlIJ,KAsIxBrV,QAAQC,IAAI8U,EAAkBO,KAAI,SAAAC,GAAE,OAAIA,EAAGpD,OAAOqD,eAtI1B,MAuIxBhB,EAvIwB,UAwIdzV,EAAayK,QAAQiM,YAAYC,QAAQL,EAAa,CACxDM,SAAU,CACN5W,aAAcyU,EACd4B,sBACArD,MAAOA,EACP9M,OAAQlG,EAAaoB,MAAMgT,SAC3BnM,KAAMA,EAAKxB,UACXoQ,SAAUV,EACVC,gBACAU,cAAe9D,EACf+D,gBAAiB/D,EACjBgE,qBAAsBhF,EACtBiF,aAActF,IACduF,cAAe3D,gBAAcC,UAC7B2D,KAAMjM,IAAYuI,mBAClB2D,MAAOlM,IAAYmM,oBACnBC,kBAAmBC,4BACnBC,yBAA0BtM,IAAYuM,4BAE1CzB,kBACIA,EAAkB0B,OAAS,EAAI1B,OAAoBrQ,IA5JvC,kCAuIXsQ,KAvIW,4BAgKM/M,EAAiBuL,GAhKvB,2CAgKjBtL,EAhKiB,eAkKdnJ,EAAayK,QAAQgB,SAAS1E,WAAWqC,eAC3CD,GAnKgB,qBAsKInJ,EAAaoB,MAAMmI,gBAtKvB,6CAyKLvJ,EAAayK,QAAQsJ,QAAQ4D,cAAc3D,MAC9C7K,GA1KQ,eAwKVyO,EAxKU,OA4KhB3W,QAAQC,IAAI0W,GACNC,EAAiBD,EAAe3P,KA7KtB,UA8KwByM,EACpCmD,EACA1O,GAhLY,WA8KV2O,EA9KU,OAkLhB7W,QAAQC,IAAI2W,IACRA,EAnLY,oCAoLqBtD,EAAYsD,GApLjC,gBAoLNE,EApLM,kBAqL0BzD,EAAiBuD,GArL3C,gBAqLNG,EArLM,OAsLZ/W,QAAQC,IAAI,mBAAoBiI,EAAcsN,YAC9CxV,QAAQC,IAAI,cAAelB,EAAaoB,MAAM8S,UAAUuC,YAvL5C,MAwLZhB,EAxLY,WAyLFzV,EAAayK,QAAQiM,YAAYuB,wBAAwB,CAC3DrB,SAAU,CACN5W,aAAcyU,EACdoC,SAAUV,EACVnD,MAAOA,EACP2E,cAAexO,EACf6N,qBAAsBhF,EACtByD,aAAcvK,IAAYuM,2BAC1BI,iBACAE,qBACAC,0BACA9D,UAAWlU,EAAaoB,MAAM8S,UAC9B4D,+BArMA,4BAwLC7B,KAxLD,kFA2MhBhV,QAAQqH,MAAR,OA3MgB,gBA+MlB4P,EAAqB,CAACzC,GACtB0C,EAAgB,CAACtD,GAhNC,sBAoNVa,YACF1V,EAAayK,QAAQgB,SAAS1E,WAC9B/G,EAAayK,QAAQgB,SAASvF,OAC9BgS,EACAC,EACAxC,IAAaC,cACb,gBACA,eACA,kBAAM,SACNjQ,EACA2E,EACAC,GA/NY,gBAmNd6N,EAnNc,OAiOlBvC,IAAIU,KAAI,SAAA8B,GAAC,OAAIA,EAAEpG,QACXqG,EAAUF,EAAK,GAlOD,kBAmOb,CACH5M,SAAU8M,EACV5M,YAAayK,IArOG,uCAwOpBlV,QAAQC,IAAR,OAxOoB,kCA0OjB,MA1OiB,uEAAH,0DAiPnB2R,EAAQ,SAAC0F,GACX,OAAO,IAAIhG,SAAQ,SAAAC,GAAO,OAAIE,WAAWF,EAAS+F,S,kKC1hB1C5C,E,8CAhCCxF,EAAkB,K,SAgCnBwF,O,2BAAAA,I,uBAAAA,I,kCAAAA,M,KAyEL,IAAMD,EAAgB,uCAAG,WAC5B3O,EACAb,EACAsS,EACAC,GAJ4B,6DAAAnX,EAAA,yDAK5BoX,EAL4B,+BAKC/C,EAAagD,SAC1C7R,EAN4B,+BAMH,eACzB8R,EAP4B,+BAO2B,SAAC3G,EAAM4G,KAC9DC,EAR4B,+BAQ6B,SAAC7G,EAAM4G,GAAP,OAAe,GACxEE,EAT4B,uBAU5BzO,EAV4B,+BAUQ,GACpCC,EAX4B,kCAWO,GAEhCrE,EAAOO,UAbkB,sBAaD,IAAIuS,IAbH,UAexBC,EAA8B3O,EAE/ByO,EAjByB,kCAkBdhS,EAAWmS,mBAAmBpS,GAlBhB,QAkB5BiS,EAlB4B,0BAqBrBI,GACP,IAAM1D,EAAe+C,EAAeW,GAC9BtE,EAAU4D,EAAWU,GAE3B,GAA4B,IAAxB1D,EAAaiC,OACf,iBAGF,IAAI5M,EAAc,IAAIsO,cACtB3D,EAAa4D,SAAQ,SAAA3C,GAAW,OAAI5L,EAAYwO,IAAI5C,MACpD5L,EAAYyO,gBAAkBR,EAAMS,UACpC1O,EAAY2O,WAAZ,MAAA3O,EAAW,CAEP5E,EAAOO,WAFA,mBAGJoO,EAAQ0B,KAAI,SAAAmD,GAAC,OAAIA,EAAEjT,gBAGtBoO,EAAQ6C,OAAS,GACnB5M,EAAY6O,YAAZ,MAAA7O,EAAW,YAAgB+J,IAG7BoE,EAAahD,KAAKnL,IArBXqO,EAAI,EArBiB,aAqBdA,EAAIX,EAAed,QArBL,mCAqBrByB,GArBqB,wDAqBaA,IArBb,+BA4C9BF,EAAahD,KAAb,MAAAgD,EAAY,YAAS1O,IAEfqP,EAA8BX,EAAaY,QAAO,SAAAxB,GAAC,OACrDA,EAAEyB,WAAWC,MAAK,SAAAC,GAAG,OAAIA,EAAIvT,UAAUwT,OAAO/T,EAAOO,iBAEnDyT,EAA0BjB,EAAaY,QACzC,SAAAxB,GAAC,OAAKA,EAAEyB,WAAWC,MAAK,SAAAC,GAAG,OAAIA,EAAIvT,UAAUwT,OAAO/T,EAAOO,iBAlDjC,UAoDPP,EAAOQ,oBAC1BkT,GArD0B,QAoD1BO,EApD0B,OAuD9BA,EAAaD,EAAwBE,OAAOD,GACtCE,EAAyD,GAE/DpZ,QAAQC,IACJ,qBACAiZ,EAAWzC,OACX,sBACAc,EAAed,QA9DW,IAAApW,EAAA,iBAgErB6X,GAhEqB,eAAA7X,EAAA,yDAiEtBgZ,EAAmBC,EAAsB,CAC7CxT,aACAyT,kBAAmBL,EAAWhB,KAG5BT,IAAiB/C,EAAagD,SAtEN,0CAwElB2B,EAAiB/J,MAAK,gBAAG0B,EAAH,EAAGA,KAAH,EAASI,KAAT,OACxBuG,EAAgB3G,EAAMkH,MAzEF,OA2ExBkB,EAAYpE,KAAKqE,GA3EO,mDA6ExBrZ,QAAQC,IAAI,uBAAwBiY,GACpClY,QAAQC,IAAI,kBAAZ,MAEA4X,EAAaqB,EAAWhB,GAAIA,GACxBT,IAAiB/C,EAAaC,cAjFV,6BAmFZuD,EAnFY,UAoFT5G,QAAQkI,IAAIJ,GApFH,iCAmFpB1R,OAnFoB,KAoFpBkN,IApFoB,kEAyF1BwE,EAAYpE,KAAKqE,GAzFS,wDAgErBnB,EAAI,EAhEiB,aAgEdA,EAAIgB,EAAWzC,QAhED,0CAgErByB,GAhEqB,qGAgESA,IAhET,2BA6F1BT,IAAiB/C,EAAagD,SA7FJ,kCA8FPpG,QAAQkI,IAAIJ,GA9FL,eA8FtBK,EA9FsB,yBA+FrB,CAAE/R,OAAQwR,EAAWzC,OAAQ7B,IAAK6E,IA/Fb,oBAkGbP,EAAWzC,OAlGE,UAkGiBnF,QAAQkI,IAAIJ,GAlG7B,8CAkGrB1R,OAlGqB,KAkGMkN,IAlGN,mDAAH,4DA4NhB8E,EAAY,WACvB,OAAO,IAAI/R,MAAOC,UAAY,KAGzB,SAAe0R,EAAtB,kC,4CAAO,qDAAAjZ,EAAA,6DACuCkZ,EADvC,EACuCA,kBACAzT,EAFvC,EAEuCA,WAFvC,IAGuCmL,eAHvC,MAGiD/B,EAHjD,EAYCyK,EAAiBJ,EAAkBK,YAEnCC,EAAYH,IACdtI,EAAO,EAfN,SAgBoCtL,EAAWgU,mBAChDH,EACA,CACEI,eAAe,IAnBhB,cAgBC/I,EAhBD,OAuBLhR,QAAQC,IAAI,oCAAqC+Q,GAE7CG,GAAO,EACX,sBAAC,sBAAA9Q,EAAA,yDACS8Q,KAAQuI,IAAcG,EAAY5I,GAD3C,uBAEGnL,EAAWgU,mBAAmBH,EAAgB,CAC5CI,eAAe,IAHpB,SAKSnI,EAAM,KALf,gEAAD,GA1BK,oBAmCwB9H,EACvBkH,EACAC,EACAnL,EACA,UACA,GAxCD,WAmCGkU,EAnCH,8BA4CK,IAAIxR,MAAM,kDA5Cf,YA8CCwR,EAAapQ,IA9Cd,uBA+CD5J,QAAQqH,MAAM2S,EAAapQ,KACrB,IAAIpB,MAAM,gDAhDf,QAmDH4I,GAAmB,OAAZ4I,QAAY,IAAZA,OAAA,EAAAA,EAAc5I,OAAQ,EAnD1B,sDAqDHpR,QAAQqH,MAAM,uBAAd,OACI,KAAI4J,QAtDL,uBAuDK,IAAIzI,MAAM,kDAvDf,eAyDCyR,EAAsD,KAzDvD,oBA4DSC,EAAoBpU,EAAYyT,EAAmB,UA5D5D,QA2DDU,EA3DC,OA6DC9S,MA7DD,+DA+DC8S,IAAkBA,EAAerQ,IA/DlC,qBAgEGqQ,EAAeE,KAhElB,iBAiEUjC,EAAI+B,EAAeE,KAAK1D,OAAS,EAjE3C,aAiE8CyB,GAAK,GAjEnD,sBAkESkC,EAAOH,EAAeE,KAAKjC,IACxBxP,WAAW,iBAnEvB,uBAoEW,IAAIF,MACN,uBAAyB4R,EAAK9T,MAAM,gBAAgBmQ,SArE7D,UAiEwDyB,EAjExD,8BA0EK,IAAI1P,MAAM6R,KAAKC,UAAUL,EAAerQ,MA1E7C,yBA8EHuH,GAAO,EA9EJ,4BAiFLnR,QAAQC,IAAI,UAAW+Q,EAAM0I,IAAcG,GAjFtC,kBAkFE,CAAE7I,OAAMI,SAlFV,0E,+BAqFQ8I,E,kFAAf,WACIpU,EACA+D,EACAhE,GAHJ,uBAAAxF,EAAA,sEAMsCyF,EAAWyU,iBAE3CzU,EAAW0U,0BARjB,cAME3Q,EAAYyO,gBANd,OAWQmC,EAAW5Q,EAAY6Q,mBAEvBC,EAAkB9Q,EAAY+Q,WAAWH,GACzCI,EAAqBF,EAAgB/Z,SAAS,UAE9Cka,EAAO,CAACD,EADM,CAAEE,SAAU,SAAUlV,eAf5C,UAmBoBC,EAAWkV,YAAY,sBAAuBF,GAnBlE,aAmBQG,EAnBR,QAoBU5T,MApBV,uBAqBU,IAAImB,MAAM,mCAAqCyS,EAAI5T,MAAM7C,SArBnE,iCAuBSyW,EAAIxB,QAvBb,6C,+BA0Be3P,E,kFAAf,WACIkH,EACAC,EACAnL,GAHJ,mCAAAzF,EAAA,6DAIIwF,EAJJ,+BAI6B,SACzBqL,EALJ,gCAOMC,GAAO,EACPxH,EAAwC,CAC1CyH,KAAM,EACNC,cAAe,EACfzH,IAAK,MAEHsR,EAAQ,EAbd,SAciB,IAAI5J,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAAnR,EAAA,sDACzBoR,YAAW,WACLN,IAGJA,GAAO,EACPnR,QAAQC,IAAI,4BACZuR,EAAO,CAAEP,SAAS,OACjBA,GACH,IACEiK,EAAQpV,EAAWqV,YACfnK,GACA,SAACyI,EAAQ2B,GACPjK,GAAO,EACPxH,EAAS,CACPC,IAAK6P,EAAO7P,IACZwH,KAAMgK,EAAQhK,KACdC,cAAe,GAEboI,EAAO7P,KACT5J,QAAQC,IAAI,yBAA0BwZ,EAAO7P,KAC7C4H,EAAO7H,KAEP3J,QAAQC,IAAI,yBAA0BwZ,GACtClI,EAAQ5H,MAGZ9D,GAEJ,MAAOkH,GACPoE,GAAO,EACPnR,QAAQqH,MAAM,oBAAqB2J,EAAMjE,GA/BlB,UAiCjBoE,IAAQD,EAjCS,uBAmCvB,sBAAC,4BAAA7Q,EAAA,+EAEmCyF,EAAW4L,qBAAqB,CAC9DV,IAHL,OAESW,EAFT,OAKGhI,EAASgI,GAAqBA,EAAkBxK,MAAM,GACjDgK,IACExH,EAEMA,EAAOC,KAChB5J,QAAQC,IAAI,iBAAkB+Q,EAAMrH,GACpCwH,GAAO,EACPK,EAAO7H,EAAOC,MACJD,EAAO0H,eAGjBrR,QAAQC,IAAI,wBAAyB+Q,EAAMrH,GAC3CwH,GAAO,EACPI,EAAQ5H,IAJR3J,QAAQC,IAAI,4BAA6B+Q,EAAMrH,GAN/C3J,QAAQC,IAAI,uBAAwB+Q,EAAMrH,IARjD,gDAsBQwH,GACHnR,QAAQC,IAAI,8BAA+B+Q,EAA3C,MAvBL,wDAAD,GAnCuB,SA8DjBY,EAAM,KA9DW,iEAAZ,yDAdjB,OAcEjI,EAdF,OAiFE,IACE7D,EAAWuV,wBAAwBH,GACnC,MAAOnO,IAnFX,OAsFEoE,GAAO,EACPnR,QAAQC,IAAI,mBAAoB0J,GAvFlC,kBAwFSA,GAxFT,6C,sBA0FO,SAASiI,EAAM0F,GACpB,OAAO,IAAIhG,SAAQ,SAAAC,GAAO,OAAIE,WAAWF,EAAS+F,S","file":"static/js/main.388a7806.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {CircularProgress} from '@material-ui/core';\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\nimport {CandyMachineAccount} from './candy-machine';\n\n\nexport const CTAButton = styled(Button)`\n  display: block !important;\n  margin: 0 auto !important;\n  background-color: #50C878\t !important;\n  min-width: 120px !important;\n  font-size: 1em !important;\n`;\n\nexport const MintButton = ({\n                               onMint,\n                               candyMachine,\n                               isMinting,\n                               isEnded,\n                               isActive,\n                               isSoldOut\n                           }: {\n    onMint: () => Promise<void>;\n    candyMachine?: CandyMachineAccount;\n    isMinting: boolean;\n    isEnded: boolean;\n    isActive: boolean;\n    isSoldOut: boolean;\n}) => {\n    const {requestGatewayToken, gatewayStatus} = useGateway();\n    const [clicked, setClicked] = useState(false);\n    const [isVerifying, setIsVerifying] = useState(false);\n\n    useEffect(() => {\n        setIsVerifying(false);\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\n            // when user approves wallet verification txn\n            setIsVerifying(true);\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n            console.log('Verified human, now minting...');\n            onMint();\n            setClicked(false);\n        }\n    }, [gatewayStatus, clicked, setClicked, onMint]);\n\n    return (\n        <CTAButton\n            disabled={\n                clicked ||\n                candyMachine?.state.isSoldOut ||\n                isSoldOut ||\n                isMinting ||\n                isEnded ||\n                !isActive ||\n                isVerifying\n            }\n            onClick={async () => {\n                if (isActive && candyMachine?.state.gatekeeper && gatewayStatus !== GatewayStatus.ACTIVE) {\n                    console.log('Requesting gateway token');\n                    setClicked(true);\n                    await requestGatewayToken();\n                } else {\n                    console.log('Minting...');\n                    await onMint();\n                }\n            }}\n            variant=\"contained\"\n        >\n            {!candyMachine ? (\n                \"CONNECTING...\"\n            ) : candyMachine?.state.isSoldOut || isSoldOut ? (\n                'SOLD OUT'\n            ) : isActive ? (\n                isVerifying ? 'VERIFYING...' :\n                    isMinting || clicked ? (\n                        <CircularProgress/>\n                    ) : (\n                        \"MINT\"\n                    )\n            ) : isEnded ? \"ENDED\" : (candyMachine?.state.goLiveDate ? (\n                \"SOON\"\n            ) : (\n                \"UNAVAILABLE\"\n            ))}\n        </CTAButton>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/poweredby.e2949f83.png\";","import {useCallback, useEffect, useMemo, useState} from \"react\";\nimport styled from \"styled-components\";\nimport confetti from \"canvas-confetti\";\nimport * as anchor from \"@project-serum/anchor\";\nimport {\n    Commitment,\n    Connection,\n    PublicKey,\n    Transaction,\n    LAMPORTS_PER_SOL\n} from \"@solana/web3.js\";\nimport {WalletAdapterNetwork} from '@solana/wallet-adapter-base';\nimport {useWallet} from \"@solana/wallet-adapter-react\";\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\nimport {GatewayProvider} from '@civic/solana-gateway-react';\nimport Countdown from \"react-countdown\";\nimport {Snackbar, Paper, LinearProgress, Chip} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport {AlertState, getAtaForMint, toDate} from './utils';\nimport {MintButton} from './MintButton';\nimport Powered from './img/poweredby.png'\nimport {\n    awaitTransactionSignatureConfirmation,\n    CANDY_MACHINE_PROGRAM,\n    CandyMachineAccount,\n    createAccountsForMint,\n    getCandyMachineState,\n    getCollectionPDA,\n    mintOneToken,\n    SetupState,\n} from \"./candy-machine\";\n\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK!.toString();\nconst decimals = process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS ? +process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS!.toString() : 9;\nconst splTokenName = process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME ? process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME.toString() : \"TOKEN\";\n\nconst WalletContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: right;\n`;\n\nconst WalletAmount = styled.div`\n  color: black;\n  width: auto;\n  padding: 5px 5px 5px 16px;\n  min-width: 48px;\n  min-height: auto;\n  border-radius: 22px;\n  background-color: #8B8000;\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\n  box-sizing: border-box;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  font-weight: 500;\n  line-height: 1.75;\n  text-transform: uppercase;\n  border: 0;\n  margin: 0;\n  display: inline-flex;\n  outline: 0;\n  position: relative;\n  align-items: center;\n  user-select: none;\n  vertical-align: middle;\n  justify-content: flex-start;\n  gap: 10px;\n`;\n\nconst Wallet = styled.ul`\n  flex: 0 0 auto;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ConnectButton = styled(WalletMultiButton)`\n  border-radius: 18px !important;\n  padding: 6px 16px;\n  background-color: #000000;\n  margin: 0 auto;\n`;\n\nconst NFT = styled(Paper)`\n  min-width: 220px;\n  margin: 0 auto;\n  padding: 5px 10px 10px 10px;\n  flex: 1 1 auto;\n  background-color: #000000 !important;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22) !important;\n`;\n\nconst Card = styled(Paper)`\n  display: inline-block;\n  background-color: var(--countdown-background-color) !important;\n  margin: 5px;\n  min-width: 40px;\n  padding: 24px;\n\n  h1 {\n    margin: 0px;\n  }\n`;\n\nconst MintButtonContainer = styled.div`\n  button.MuiButton-contained:not(.MuiButton-containedPrimary).Mui-disabled {\n    color: #464646;\n  }\n\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):hover,\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):focus {\n    -webkit-animation: pulse 1s;\n    animation: pulse 1s;\n    box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);\n  }\n\n  @-webkit-keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n\n  @keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n`;\n\nconst SolExplorerLink = styled.a`\n  color: var(--title-text-color);\n  border-bottom: 1px solid var(--title-text-color);\n  font-weight: bold;\n  list-style-image: none;\n  list-style-position: outside;\n  list-style-type: none;\n  outline: none;\n  text-decoration: none;\n  text-size-adjust: 100%;\n\n  :hover {\n    border-bottom: 2px solid var(--title-text-color);\n  }\n`;\n\nconst MainContainer = styled.div`\n  display: flex;\n  position:relative;\n  flex-direction: column;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-right: 4%;\n  margin-left: 4%;\n  text-align: center;\n  justify-content: center;\n`;\n\nconst MintContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1 1 auto;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nconst DesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  gap: 20px;\n`;\n\nconst Price = styled(Chip)`\n  position: absolute;\n  margin: 5px;\n  font-weight: bold;\n  font-size: 1.2em !important;\n  font-family: 'Patrick Hand', cursive !important;\n`;\n\nconst Image = styled.img`\n  height: 200px;\n  width: auto;\n  border-radius: 7px;\n  box-shadow: 5px 5px 40px 5px rgba(0, 0, 0, 0.5);\n`;\n\nconst BorderLinearProgress = styled(LinearProgress)`\n  margin: 2px;\n  height: 2px !important;\n  border-radius: 3px;\n  border: 2px solid white;\n  box-shadow: 5px 5px 40px 5px rgba(0, 0, 0, 0.5);\n  background-color: #8B8000 !important;\n\n  > div.MuiLinearProgress-barColorPrimary {\n    background-color: #8B0000 !important;\n  }\n\n  > div.MuiLinearProgress-bar1Determinate {\n    border-radius: 30px !important;\n    background-image: linear-gradient(270deg, rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.5));\n  }\n`;\n\nexport interface HomeProps {\n    candyMachineId?: anchor.web3.PublicKey;\n    connection: anchor.web3.Connection;\n    txTimeout: number;\n    rpcHost: string;\n    network: WalletAdapterNetwork;\n}\n\nconst Home = (props: HomeProps) => {\n    const [balance, setBalance] = useState<number>();\n    const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n    const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\n    const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\n    const [itemsAvailable, setItemsAvailable] = useState(0);\n    const [itemsRedeemed, setItemsRedeemed] = useState(0);\n    const [itemsRemaining, setItemsRemaining] = useState(0);\n    const [isSoldOut, setIsSoldOut] = useState(false);\n    const [payWithSplToken, setPayWithSplToken] = useState(false);\n    const [price, setPrice] = useState(0);\n    const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\n    const [whitelistPrice, setWhitelistPrice] = useState(0);\n    const [whitelistEnabled, setWhitelistEnabled] = useState(false);\n    const [isBurnToken, setIsBurnToken] = useState(false);\n    const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\n    const [isEnded, setIsEnded] = useState(false);\n    const [endDate, setEndDate] = useState<Date>();\n    const [isPresale, setIsPresale] = useState(false);\n    const [isWLOnly, setIsWLOnly] = useState(false);\n\n    const [alertState, setAlertState] = useState<AlertState>({\n        open: false,\n        message: \"\",\n        severity: undefined,\n    });\n\n    const [needTxnSplit, setNeedTxnSplit] = useState(true);\n    const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n    const wallet = useWallet();\n    const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n\n    const rpcUrl = props.rpcHost;\n    const solFeesEstimation = 0.012; // approx of account creation fees\n\n    const anchorWallet = useMemo(() => {\n        if (\n            !wallet ||\n            !wallet.publicKey ||\n            !wallet.signAllTransactions ||\n            !wallet.signTransaction\n        ) {\n            return;\n        }\n\n        return {\n            publicKey: wallet.publicKey,\n            signAllTransactions: wallet.signAllTransactions,\n            signTransaction: wallet.signTransaction,\n        } as anchor.Wallet;\n    }, [wallet]);\n\n    const refreshCandyMachineState = useCallback(\n        async (commitment: Commitment = 'confirmed') => {\n            if (!anchorWallet) {\n                return;\n            }\n\n            const connection = new Connection(props.rpcHost, commitment);\n\n            if (props.candyMachineId) {\n                try {\n                    const cndy = await getCandyMachineState(\n                        anchorWallet,\n                        props.candyMachineId,\n                        connection,\n                    );\n\n                    setCandyMachine(cndy);\n                    setItemsAvailable(cndy.state.itemsAvailable);\n                    setItemsRemaining(cndy.state.itemsRemaining);\n                    setItemsRedeemed(cndy.state.itemsRedeemed);\n\n                    var divider = 1;\n                    if (decimals) {\n                        divider = +('1' + new Array(decimals).join('0').slice() + '0');\n                    }\n\n                    // detect if using spl-token to mint\n                    if (cndy.state.tokenMint) {\n                        setPayWithSplToken(true);\n                        // Customize your SPL-TOKEN Label HERE\n                        // TODO: get spl-token metadata name\n                        setPriceLabel(splTokenName);\n                        setPrice(cndy.state.price.toNumber() / divider);\n                        setWhitelistPrice(cndy.state.price.toNumber() / divider);\n                    } else {\n                        setPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n                        setWhitelistPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n                    }\n\n\n                    // fetch whitelist token balance\n                    if (cndy.state.whitelistMintSettings) {\n                        setWhitelistEnabled(true);\n                        setIsBurnToken(cndy.state.whitelistMintSettings.mode.burnEveryTime);\n                        setIsPresale(cndy.state.whitelistMintSettings.presale);\n                        setIsWLOnly(!isPresale && cndy.state.whitelistMintSettings.discountPrice === null);\n\n                        if (cndy.state.whitelistMintSettings.discountPrice !== null && cndy.state.whitelistMintSettings.discountPrice !== cndy.state.price) {\n                            if (cndy.state.tokenMint) {\n                                setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / divider);\n                            } else {\n                                setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / LAMPORTS_PER_SOL);\n                            }\n                        }\n\n                        let balance = 0;\n                        try {\n                            const tokenBalance =\n                                await props.connection.getTokenAccountBalance(\n                                    (\n                                        await getAtaForMint(\n                                            cndy.state.whitelistMintSettings.mint,\n                                            anchorWallet.publicKey,\n                                        )\n                                    )[0],\n                                );\n\n                            balance = tokenBalance?.value?.uiAmount || 0;\n                        } catch (e) {\n                            console.error(e);\n                            balance = 0;\n                        }\n                        if (commitment !== \"processed\") {\n                            setWhitelistTokenBalance(balance);\n                        }\n                        setIsActive(isPresale && !isEnded && balance > 0);\n\n                    } else {\n                        setWhitelistEnabled(false);\n                    }\n\n                    // end the mint when date is reached\n                    if (cndy?.state.endSettings?.endSettingType.date) {\n                        setEndDate(toDate(cndy.state.endSettings.number));\n                        if (\n                            cndy.state.endSettings.number.toNumber() <\n                            new Date().getTime() / 1000\n                        ) {\n                            setIsEnded(true);\n                            setIsActive(false);\n                        }\n                    }\n                    // end the mint when amount is reached\n                    if (cndy?.state.endSettings?.endSettingType.amount) {\n                        let limit = Math.min(\n                            cndy.state.endSettings.number.toNumber(),\n                            cndy.state.itemsAvailable,\n                        );\n                        setItemsAvailable(limit);\n                        if (cndy.state.itemsRedeemed < limit) {\n                            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n                        } else {\n                            setItemsRemaining(0);\n                            cndy.state.isSoldOut = true;\n                            setIsEnded(true);\n                        }\n                    } else {\n                        setItemsRemaining(cndy.state.itemsRemaining);\n                    }\n\n                    if (cndy.state.isSoldOut) {\n                        setIsActive(false);\n                    }\n\n                    const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n                    const collectionPDAAccount = await connection.getAccountInfo(\n                        collectionPDA,\n                    );\n\n                    const txnEstimate =\n                        892 +\n                        (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n                        (cndy.state.tokenMint ? 66 : 0) +\n                        (cndy.state.whitelistMintSettings ? 34 : 0) +\n                        (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n                        (cndy.state.gatekeeper ? 33 : 0) +\n                        (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n                    setNeedTxnSplit(txnEstimate > 1230);\n                } catch (e) {\n                    if (e instanceof Error) {\n                        if (\n                            e.message === `Account does not exist ${props.candyMachineId}`\n                        ) {\n                            setAlertState({\n                                open: true,\n                                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                                severity: 'error',\n                                hideDuration: null,\n                            });\n                        } else if (\n                            e.message.startsWith('failed to get info about account')\n                        ) {\n                            setAlertState({\n                                open: true,\n                                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                                severity: 'error',\n                                hideDuration: null,\n                            });\n                        }\n                    } else {\n                        setAlertState({\n                            open: true,\n                            message: `${e}`,\n                            severity: 'error',\n                            hideDuration: null,\n                        });\n                    }\n                    console.log(e);\n                }\n            } else {\n                setAlertState({\n                    open: true,\n                    message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n                    severity: 'error',\n                    hideDuration: null,\n                });\n            }\n        },\n        [anchorWallet, props.candyMachineId, props.rpcHost, isEnded, isPresale, props.connection],\n    );\n\n    const renderGoLiveDateCounter = ({days, hours, minutes, seconds}: any) => {\n        return (\n            <div><Card elevation={1}><h1>{days}</h1>Days</Card><Card elevation={1}><h1>{hours}</h1>\n                Hours</Card><Card elevation={1}><h1>{minutes}</h1>Mins</Card><Card elevation={1}>\n                <h1>{seconds}</h1>Secs</Card></div>\n        );\n    };\n\n    const renderEndDateCounter = ({days, hours, minutes}: any) => {\n        let label = \"\";\n        if (days > 0) {\n            label += days + \" days \"\n        }\n        if (hours > 0) {\n            label += hours + \" hours \"\n        }\n        label += (minutes + 1) + \" minutes left to MINT.\"\n        return (\n            <div><h3>{label}</h3></div>\n        );\n    };\n\n    function displaySuccess(mintPublicKey: any, qty: number = 1): void {\n        let remaining = itemsRemaining - qty;\n        setItemsRemaining(remaining);\n        setIsSoldOut(remaining === 0);\n        if (isBurnToken && whitelistTokenBalance && whitelistTokenBalance > 0) {\n            let balance = whitelistTokenBalance - qty;\n            setWhitelistTokenBalance(balance);\n            setIsActive(isPresale && !isEnded && balance > 0);\n        }\n        setSetupTxn(undefined);\n        setItemsRedeemed(itemsRedeemed + qty);\n        if (!payWithSplToken && balance && balance > 0) {\n            setBalance(balance - ((whitelistEnabled ? whitelistPrice : price) * qty) - solFeesEstimation);\n        }\n        setSolanaExplorerLink(cluster === \"devnet\" || cluster === \"testnet\"\n            ? (\"https://solscan.io/token/\" + mintPublicKey + \"?cluster=\" + cluster)\n            : (\"https://solscan.io/token/\" + mintPublicKey));\n        setIsMinting(false);\n        throwConfetti();\n    };\n\n    function throwConfetti(): void {\n        confetti({\n            particleCount: 400,\n            spread: 70,\n            origin: {y: 0.6},\n        });\n    }\n\n    const onMint = async (\n        beforeTransactions: Transaction[] = [],\n        afterTransactions: Transaction[] = [],\n    ) => {\n        try {\n            if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n                setIsMinting(true);\n                let setupMint: SetupState | undefined;\n                if (needTxnSplit && setupTxn === undefined) {\n                    setAlertState({\n                        open: true,\n                        message: 'Please validate account setup transaction',\n                        severity: 'info',\n                    });\n                    setupMint = await createAccountsForMint(\n                        candyMachine,\n                        wallet.publicKey,\n                    );\n                    let status: any = {err: true};\n                    if (setupMint.transaction) {\n                        status = await awaitTransactionSignatureConfirmation(\n                            setupMint.transaction,\n                            props.txTimeout,\n                            props.connection,\n                            true,\n                        );\n                    }\n                    if (status && !status.err) {\n                        setSetupTxn(setupMint);\n                        setAlertState({\n                            open: true,\n                            message:\n                                'Setup transaction succeeded! You can now validate mint transaction',\n                            severity: 'info',\n                        });\n                    } else {\n                        setAlertState({\n                            open: true,\n                            message: 'Mint failed! Please try again!',\n                            severity: 'error',\n                        });\n                        return;\n                    }\n                }\n\n                const setupState = setupMint ?? setupTxn;\n                const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n                let mintResult = await mintOneToken(\n                    candyMachine,\n                    wallet.publicKey,\n                    mint,\n                    beforeTransactions,\n                    afterTransactions,\n                    setupState,\n                );\n\n                let status: any = {err: true};\n                let metadataStatus = null;\n                if (mintResult) {\n                    status = await awaitTransactionSignatureConfirmation(\n                        mintResult.mintTxId,\n                        props.txTimeout,\n                        props.connection,\n                        true,\n                    );\n\n                    metadataStatus =\n                        await candyMachine.program.provider.connection.getAccountInfo(\n                            mintResult.metadataKey,\n                            'processed',\n                        );\n                    console.log('Metadata status: ', !!metadataStatus);\n                }\n\n                if (status && !status.err && metadataStatus) {\n                    setAlertState({\n                        open: true,\n                        message: 'Congratulations! Mint succeeded!',\n                        severity: 'success',\n                    });\n\n                    // update front-end amounts\n                    displaySuccess(mint.publicKey);\n                    refreshCandyMachineState('processed');\n                } else if (status && !status.err) {\n                    setAlertState({\n                        open: true,\n                        message:\n                            'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\n                        severity: 'error',\n                        hideDuration: 8000,\n                    });\n                    refreshCandyMachineState();\n                } else {\n                    setAlertState({\n                        open: true,\n                        message: 'Mint failed! Please try again!',\n                        severity: 'error',\n                    });\n                    refreshCandyMachineState();\n                }\n            }\n        } catch (error: any) {\n            let message = error.msg || 'Minting failed! Please try again!';\n            if (!error.msg) {\n                if (!error.message) {\n                    message = 'Transaction Timeout! Please try again.';\n                } else if (error.message.indexOf('0x138')) {\n                } else if (error.message.indexOf('0x137')) {\n                    message = `SOLD OUT!`;\n                } else if (error.message.indexOf('0x135')) {\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\n                }\n            } else {\n                if (error.code === 311) {\n                    message = `SOLD OUT!`;\n                } else if (error.code === 312) {\n                    message = `Minting period hasn't started yet.`;\n                }\n            }\n\n            setAlertState({\n                open: true,\n                message,\n                severity: \"error\",\n            });\n        } finally {\n            setIsMinting(false);\n        }\n    };\n\n    useEffect(() => {\n        (async () => {\n            if (anchorWallet) {\n                const balance = await props.connection.getBalance(anchorWallet!.publicKey);\n                setBalance(balance / LAMPORTS_PER_SOL);\n            }\n        })();\n    }, [anchorWallet, props.connection]);\n\n    useEffect(() => {\n        refreshCandyMachineState();\n    }, [\n        anchorWallet,\n        props.candyMachineId,\n        props.connection,\n        isEnded,\n        isPresale,\n        refreshCandyMachineState\n    ]);\n\n\n    return (\n        <main>\n            <MainContainer>\n                <WalletContainer>\n                    <Wallet>\n                        {wallet ?\n                            <WalletAmount>{(balance || 0).toLocaleString()} SOL<ConnectButton/></WalletAmount> :\n                            <ConnectButton>Connect Wallet</ConnectButton>}\n                    </Wallet>\n                    <a href=\"http://www.bobbyrabbits.com/\">\n                    <img src={Powered} style={{position: 'fixed', bottom: '2px', right: '2px', maxWidth: '100px'}} alt='poweredby logo'/>\n                    </a>\n                </WalletContainer>\n                <br/>\n                <MintContainer>\n                    <DesContainer>\n                        <NFT elevation={3}>\n                            <h1>BAAD GOATS NFT</h1>\n                            <br/>\n                            <div><Price\n                                label={isActive && whitelistEnabled && (whitelistTokenBalance > 0) ? (whitelistPrice + \" \" + priceLabel) : (price + \" \" + priceLabel)}/><Image\n                                src=\"cool-cats.gif\"\n                                alt=\"NFT To Mint\"/></div>\n                            <br/>\n                            {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && isBurnToken &&\n                              <h3>You own {whitelistTokenBalance} WL\n                                mint {whitelistTokenBalance > 1 ? \"tokens\" : \"token\"}.</h3>}\n                            {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && !isBurnToken &&\n                              <h3>You are whitelisted and allowed to mint.</h3>}\n                            {wallet && isActive && endDate && Date.now() < endDate.getTime() &&\n                              <Countdown\n                                date={toDate(candyMachine?.state?.endSettings?.number)}\n                                onMount={({completed}) => completed && setIsEnded(true)}\n                                onComplete={() => {\n                                    setIsEnded(true);\n                                }}\n                                renderer={renderEndDateCounter}\n                              />}\n                            {wallet && isActive &&\n                              <h3>TOTAL MINTED : {itemsRedeemed} / {itemsAvailable}</h3>}\n                            {wallet && isActive && <BorderLinearProgress variant=\"determinate\"\n                                                                         value={100 - (itemsRemaining * 100 / itemsAvailable)}/>}\n                            <br/>\n                            <MintButtonContainer>\n                                {!isActive && !isEnded && candyMachine?.state.goLiveDate && (!isWLOnly || whitelistTokenBalance > 0) ? (\n                                    <Countdown\n                                        date={toDate(candyMachine?.state.goLiveDate)}\n                                        onMount={({completed}) => completed && setIsActive(!isEnded)}\n                                        onComplete={() => {\n                                            setIsActive(!isEnded);\n                                        }}\n                                        renderer={renderGoLiveDateCounter}\n                                    />) : (\n                                    !wallet ? (\n                                        <ConnectButton>Connect Wallet</ConnectButton>\n                                    ) : (!isWLOnly || whitelistTokenBalance > 0) ?\n                                        candyMachine?.state.gatekeeper &&\n                                        wallet.publicKey &&\n                                        wallet.signTransaction ? (\n                                            <GatewayProvider\n                                                wallet={{\n                                                    publicKey:\n                                                        wallet.publicKey ||\n                                                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                                                    //@ts-ignore\n                                                    signTransaction: wallet.signTransaction,\n                                                }}\n                                                // // Replace with following when added\n                                                // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\n                                                gatekeeperNetwork={\n                                                    candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                                                } // This is the ignite (captcha) network\n                                                /// Don't need this for mainnet\n                                                clusterUrl={rpcUrl}\n                                                cluster={cluster}\n                                                options={{autoShowModal: false}}\n                                            >\n                                                <MintButton\n                                                    candyMachine={candyMachine}\n                                                    isMinting={isMinting}\n                                                    isActive={isActive}\n                                                    isEnded={isEnded}\n                                                    isSoldOut={isSoldOut}\n                                                    onMint={onMint}\n                                                />\n                                            </GatewayProvider>\n                                        ) : (\n                                            <MintButton\n                                                candyMachine={candyMachine}\n                                                isMinting={isMinting}\n                                                isActive={isActive}\n                                                isEnded={isEnded}\n                                                isSoldOut={isSoldOut}\n                                                onMint={onMint}\n                                            />\n\n                                        ) :\n                                        <h1>Mint is private.</h1>\n                                )}\n                            </MintButtonContainer>\n                            <br/>\n                            {wallet && isActive && solanaExplorerLink &&\n                              <SolExplorerLink href={solanaExplorerLink} target=\"_blank\">View on\n                                Solscan</SolExplorerLink>}\n                        </NFT>\n                    </DesContainer>\n                </MintContainer>\n            </MainContainer>\n            <Snackbar\n                open={alertState.open}\n                autoHideDuration={6000}\n                onClose={() => setAlertState({...alertState, open: false})}\n            >\n                <Alert\n                    onClose={() => setAlertState({...alertState, open: false})}\n                    severity={alertState.severity}\n                >\n                    {alertState.message}\n                </Alert>\n            </Snackbar>\n        </main>\n    );\n};\n\nexport default Home;\n","import { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport {\n    ConnectionProvider,\n    WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolflareWebWallet,\n    getSolletWallet,\n    getSolletExtensionWallet,\n    getSolongWallet,\n    getLedgerWallet,\n    getSafePalWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n    WalletModalProvider\n} from '@solana/wallet-adapter-react-ui';\n\nimport \"./App.css\";\nimport { DEFAULT_TIMEOUT } from './connection';\nimport Home from \"./Home\";\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n    try {\n        const candyMachineId = new anchor.web3.PublicKey(\n            process.env.REACT_APP_CANDY_MACHINE_ID!,\n        );\n\n        return candyMachineId;\n    } catch (e) {\n        console.log('Failed to construct CandyMachineId', e);\n        return undefined;\n    }\n};\n\nconst candyMachineId = getCandyMachineId();\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(\n    rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\n);\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n    // Custom RPC endpoint.\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\n    // Only the wallets you configure here will be compiled into your application, and only the dependencies\n    // of wallets that your users connect to will be loaded.\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSlopeWallet(),\n            getSolflareWallet(),\n            getSolflareWebWallet(),\n            getSolletWallet({ network }),\n            getSolletExtensionWallet({ network }),\n            getSolongWallet(),\n            getLedgerWallet(),\n            getSafePalWallet(),\n        ],\n        []\n    );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect={true}>\n            <WalletModalProvider>\n              <Home\n                candyMachineId={candyMachineId}\n                connection={connection}\n                txTimeout={DEFAULT_TIMEOUT}\n                rpcHost={rpcHost}\n                network={network}\n              />\n            </WalletModalProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n  hideDuration?: number | null;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n    new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n    'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n    mint: anchor.web3.PublicKey,\n    buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n      [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n    gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n      [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n      CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n    wallet: anchor.web3.PublicKey,\n    gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n      [\n        wallet.toBuffer(),\n        Buffer.from('gateway'),\n        Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n        gatekeeperNetwork.toBuffer(),\n      ],\n      CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n    associatedTokenAddress: anchor.web3.PublicKey,\n    payer: anchor.web3.PublicKey,\n    walletAddress: anchor.web3.PublicKey,\n    splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport {\n    SystemProgram,\n    Transaction,\n    SYSVAR_SLOT_HASHES_PUBKEY,\n} from '@solana/web3.js';\nimport { sendTransactions, SequenceType } from './connection';\n\nimport {\n    CIVIC,\n    getAtaForMint,\n    getNetworkExpire,\n    getNetworkToken,\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n    'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n    authority: anchor.web3.PublicKey;\n    itemsAvailable: number;\n    itemsRedeemed: number;\n    itemsRemaining: number;\n    treasury: anchor.web3.PublicKey;\n    tokenMint: null | anchor.web3.PublicKey;\n    isSoldOut: boolean;\n    isActive: boolean;\n    isPresale: boolean;\n    isWhitelistOnly: boolean;\n    goLiveDate: anchor.BN;\n    price: anchor.BN;\n    gatekeeper: null | {\n        expireOnUse: boolean;\n        gatekeeperNetwork: anchor.web3.PublicKey;\n    };\n    endSettings: null | {\n        number: anchor.BN;\n        endSettingType: any;\n    };\n    whitelistMintSettings: null | {\n        mode: any;\n        mint: anchor.web3.PublicKey;\n        presale: boolean;\n        discountPrice: null | anchor.BN;\n    };\n    hiddenSettings: null | {\n        name: string;\n        uri: string;\n        hash: Uint8Array;\n    };\n    retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n    id: anchor.web3.PublicKey;\n    program: anchor.Program;\n    state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n    txid: anchor.web3.TransactionSignature,\n    timeout: number,\n    connection: anchor.web3.Connection,\n    queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n    let done = false;\n    let status: anchor.web3.SignatureStatus | null | void = {\n        slot: 0,\n        confirmations: 0,\n        err: null,\n    };\n    let subId = 0;\n    status = await new Promise(async (resolve, reject) => {\n        setTimeout(() => {\n            if (done) {\n                return;\n            }\n            done = true;\n            console.log('Rejecting for timeout...');\n            reject({ timeout: true });\n        }, timeout);\n\n        while (!done && queryStatus) {\n            // eslint-disable-next-line no-loop-func\n            (async () => {\n                try {\n                    const signatureStatuses = await connection.getSignatureStatuses([\n                        txid,\n                    ]);\n                    status = signatureStatuses && signatureStatuses.value[0];\n                    if (!done) {\n                        if (!status) {\n                            console.log('REST null result for', txid, status);\n                        } else if (status.err) {\n                            console.log('REST error for', txid, status);\n                            done = true;\n                            reject(status.err);\n                        } else if (!status.confirmations) {\n                            console.log('REST no confirmations for', txid, status);\n                        } else {\n                            console.log('REST confirmation for', txid, status);\n                            done = true;\n                            resolve(status);\n                        }\n                    }\n                } catch (e) {\n                    if (!done) {\n                        console.log('REST connection error: txid', txid, e);\n                    }\n                }\n            })();\n            await sleep(2000);\n        }\n    });\n\n    done = true;\n    console.log('Returning status', status);\n    return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress: anchor.web3.PublicKey,\n    payer: anchor.web3.PublicKey,\n    walletAddress: anchor.web3.PublicKey,\n    splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n        { pubkey: walletAddress, isSigner: false, isWritable: false },\n        { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n        {\n            pubkey: anchor.web3.SystemProgram.programId,\n            isSigner: false,\n            isWritable: false,\n        },\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n        {\n            pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false,\n        },\n    ];\n    return new anchor.web3.TransactionInstruction({\n        keys,\n        programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        data: Buffer.from([]),\n    });\n};\n\nexport const getCandyMachineState = async (\n    anchorWallet: anchor.Wallet,\n    candyMachineId: anchor.web3.PublicKey,\n    connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n    const provider = new anchor.Provider(connection, anchorWallet, {\n        preflightCommitment: 'processed',\n    });\n\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\n    const itemsAvailable = state.data.itemsAvailable.toNumber();\n    const itemsRedeemed = state.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n    return {\n        id: candyMachineId,\n        program,\n        state: {\n            authority: state.authority,\n            itemsAvailable,\n            itemsRedeemed,\n            itemsRemaining,\n            isSoldOut: itemsRemaining === 0,\n            isActive: false,\n            isPresale: false,\n            isWhitelistOnly: false,\n            goLiveDate: state.data.goLiveDate,\n            treasury: state.wallet,\n            tokenMint: state.tokenMint,\n            gatekeeper: state.data.gatekeeper,\n            endSettings: state.data.endSettings,\n            whitelistMintSettings: state.data.whitelistMintSettings,\n            hiddenSettings: state.data.hiddenSettings,\n            price: state.data.price,\n            retainAuthority: state.data.retainAuthority,\n        },\n    };\n};\n\nconst getMasterEdition = async (\n    mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [\n                Buffer.from('metadata'),\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n                mint.toBuffer(),\n                Buffer.from('edition'),\n            ],\n            TOKEN_METADATA_PROGRAM_ID,\n        )\n    )[0];\n};\n\nconst getMetadata = async (\n    mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [\n                Buffer.from('metadata'),\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n                mint.toBuffer(),\n            ],\n            TOKEN_METADATA_PROGRAM_ID,\n        )\n    )[0];\n};\n\nexport const getCandyMachineCreator = async (\n    candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n    return await anchor.web3.PublicKey.findProgramAddress(\n        [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n        CANDY_MACHINE_PROGRAM,\n    );\n};\n\nexport const getCollectionPDA = async (\n    candyMachineAddress: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n    return await anchor.web3.PublicKey.findProgramAddress(\n        [Buffer.from('collection'), candyMachineAddress.toBuffer()],\n        CANDY_MACHINE_PROGRAM,\n    );\n};\n\nexport interface CollectionData {\n    mint: anchor.web3.PublicKey;\n    candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n    mint: anchor.web3.PublicKey,\n    newAuthority: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [\n                Buffer.from('metadata'),\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n                mint.toBuffer(),\n                Buffer.from('collection_authority'),\n                newAuthority.toBuffer(),\n            ],\n            TOKEN_METADATA_PROGRAM_ID,\n        )\n    )[0];\n};\n\nexport type SetupState = {\n    mint: anchor.web3.Keypair;\n    userTokenAccount: anchor.web3.PublicKey;\n    transaction: string;\n};\n\nexport const createAccountsForMint = async (\n    candyMachine: CandyMachineAccount,\n    payer: anchor.web3.PublicKey,\n): Promise<SetupState> => {\n    const mint = anchor.web3.Keypair.generate();\n    const userTokenAccountAddress = (\n        await getAtaForMint(mint.publicKey, payer)\n    )[0];\n\n    const signers: anchor.web3.Keypair[] = [mint];\n    const instructions = [\n        anchor.web3.SystemProgram.createAccount({\n            fromPubkey: payer,\n            newAccountPubkey: mint.publicKey,\n            space: MintLayout.span,\n            lamports:\n                await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n                    MintLayout.span,\n                ),\n            programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n            TOKEN_PROGRAM_ID,\n            mint.publicKey,\n            0,\n            payer,\n            payer,\n        ),\n        createAssociatedTokenAccountInstruction(\n            userTokenAccountAddress,\n            payer,\n            payer,\n            mint.publicKey,\n        ),\n        Token.createMintToInstruction(\n            TOKEN_PROGRAM_ID,\n            mint.publicKey,\n            userTokenAccountAddress,\n            payer,\n            [],\n            1,\n        ),\n    ];\n\n    return {\n        mint: mint,\n        userTokenAccount: userTokenAccountAddress,\n        transaction: (\n            await sendTransactions(\n                candyMachine.program.provider.connection,\n                candyMachine.program.provider.wallet,\n                [instructions],\n                [signers],\n                SequenceType.StopOnFailure,\n                'singleGossip',\n                () => {},\n                () => false,\n                undefined,\n                [],\n                [],\n            )\n        ).txs[0].txid,\n    };\n};\n\ntype MintResult = {\n    mintTxId: string;\n    metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n    candyMachine: CandyMachineAccount,\n    payer: anchor.web3.PublicKey,\n    mint: anchor.web3.Keypair,\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n    setupState?: SetupState,\n): Promise<MintResult | null> => {\n    const userTokenAccountAddress = (\n        await getAtaForMint(mint.publicKey, payer)\n    )[0];\n\n    const userPayingAccountAddress = candyMachine.state.tokenMint\n        ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n        : payer;\n\n    const candyMachineAddress = candyMachine.id;\n    const remainingAccounts = [];\n    const instructions = [];\n    const signers: anchor.web3.Keypair[] = [];\n    console.log('SetupState: ', setupState);\n    if (!setupState) {\n        signers.push(mint);\n        instructions.push(\n            ...[\n                anchor.web3.SystemProgram.createAccount({\n                    fromPubkey: payer,\n                    newAccountPubkey: mint.publicKey,\n                    space: MintLayout.span,\n                    lamports:\n                        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n                            MintLayout.span,\n                        ),\n                    programId: TOKEN_PROGRAM_ID,\n                }),\n                Token.createInitMintInstruction(\n                    TOKEN_PROGRAM_ID,\n                    mint.publicKey,\n                    0,\n                    payer,\n                    payer,\n                ),\n                createAssociatedTokenAccountInstruction(\n                    userTokenAccountAddress,\n                    payer,\n                    payer,\n                    mint.publicKey,\n                ),\n                Token.createMintToInstruction(\n                    TOKEN_PROGRAM_ID,\n                    mint.publicKey,\n                    userTokenAccountAddress,\n                    payer,\n                    [],\n                    1,\n                ),\n            ],\n        );\n    }\n\n    if (candyMachine.state.gatekeeper) {\n        remainingAccounts.push({\n            pubkey: (\n                await getNetworkToken(\n                    payer,\n                    candyMachine.state.gatekeeper.gatekeeperNetwork,\n                )\n            )[0],\n            isWritable: true,\n            isSigner: false,\n        });\n\n        if (candyMachine.state.gatekeeper.expireOnUse) {\n            remainingAccounts.push({\n                pubkey: CIVIC,\n                isWritable: false,\n                isSigner: false,\n            });\n            remainingAccounts.push({\n                pubkey: (\n                    await getNetworkExpire(\n                        candyMachine.state.gatekeeper.gatekeeperNetwork,\n                    )\n                )[0],\n                isWritable: false,\n                isSigner: false,\n            });\n        }\n    }\n    if (candyMachine.state.whitelistMintSettings) {\n        const mint = new anchor.web3.PublicKey(\n            candyMachine.state.whitelistMintSettings.mint,\n        );\n\n        const whitelistToken = (await getAtaForMint(mint, payer))[0];\n        remainingAccounts.push({\n            pubkey: whitelistToken,\n            isWritable: true,\n            isSigner: false,\n        });\n\n        if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n            remainingAccounts.push({\n                pubkey: mint,\n                isWritable: true,\n                isSigner: false,\n            });\n            remainingAccounts.push({\n                pubkey: payer,\n                isWritable: false,\n                isSigner: true,\n            });\n        }\n    }\n\n    if (candyMachine.state.tokenMint) {\n        remainingAccounts.push({\n            pubkey: userPayingAccountAddress,\n            isWritable: true,\n            isSigner: false,\n        });\n        remainingAccounts.push({\n            pubkey: payer,\n            isWritable: false,\n            isSigner: true,\n        });\n    }\n    const metadataAddress = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n\n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n        candyMachineAddress,\n    );\n\n    console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n    instructions.push(\n        await candyMachine.program.instruction.mintNft(creatorBump, {\n            accounts: {\n                candyMachine: candyMachineAddress,\n                candyMachineCreator,\n                payer: payer,\n                wallet: candyMachine.state.treasury,\n                mint: mint.publicKey,\n                metadata: metadataAddress,\n                masterEdition,\n                mintAuthority: payer,\n                updateAuthority: payer,\n                tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n                tokenProgram: TOKEN_PROGRAM_ID,\n                systemProgram: SystemProgram.programId,\n                rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n                clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n                recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n                instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n            },\n            remainingAccounts:\n                remainingAccounts.length > 0 ? remainingAccounts : undefined,\n        }),\n    );\n\n    const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n    const collectionPDAAccount =\n        await candyMachine.program.provider.connection.getAccountInfo(\n            collectionPDA,\n        );\n\n    if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n        try {\n            const collectionData =\n                (await candyMachine.program.account.collectionPda.fetch(\n                    collectionPDA,\n                )) as CollectionData;\n            console.log(collectionData);\n            const collectionMint = collectionData.mint;\n            const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n                collectionMint,\n                collectionPDA,\n            );\n            console.log(collectionMint);\n            if (collectionMint) {\n                const collectionMetadata = await getMetadata(collectionMint);\n                const collectionMasterEdition = await getMasterEdition(collectionMint);\n                console.log('Collection PDA: ', collectionPDA.toBase58());\n                console.log('Authority: ', candyMachine.state.authority.toBase58());\n                instructions.push(\n                    await candyMachine.program.instruction.setCollectionDuringMint({\n                        accounts: {\n                            candyMachine: candyMachineAddress,\n                            metadata: metadataAddress,\n                            payer: payer,\n                            collectionPda: collectionPDA,\n                            tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n                            instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n                            collectionMint,\n                            collectionMetadata,\n                            collectionMasterEdition,\n                            authority: candyMachine.state.authority,\n                            collectionAuthorityRecord,\n                        },\n                    }),\n                );\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const instructionsMatrix = [instructions];\n    const signersMatrix = [signers];\n\n    try {\n        const txns = (\n            await sendTransactions(\n                candyMachine.program.provider.connection,\n                candyMachine.program.provider.wallet,\n                instructionsMatrix,\n                signersMatrix,\n                SequenceType.StopOnFailure,\n                'singleGossip',\n                () => {},\n                () => false,\n                undefined,\n                beforeTransactions,\n                afterTransactions,\n            )\n        ).txs.map(t => t.txid);\n        const mintTxn = txns[0];\n        return {\n            mintTxId: mintTxn,\n            metadataKey: metadataAddress,\n        };\n    } catch (e) {\n        console.log(e);\n    }\n    return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n    return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n};\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n    connection: Connection,\n    txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[][],\n    signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n            connection,\n            wallet,\n            instructions[0],\n            filteredSigners[0],\n            'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n            connection,\n            wallet,\n            instructions,\n            filteredSigners,\n            SequenceType.StopOnFailure,\n            'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n        'Died on ',\n        stopPoint,\n        'retrying from instruction',\n        instructions[stopPoint],\n        'instructions length is',\n        instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n    connection: Connection,\n    wallet: any,\n    instructionSet: TransactionInstruction[][],\n    signersSet: Keypair[][],\n    sequenceType: SequenceType = SequenceType.Parallel,\n    commitment: Commitment = 'singleGossip',\n    successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n    failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n    block?: BlockhashAndFeeCalculator,\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\n      t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n      t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  let signedTxns = await wallet.signAllTransactions(\n      partiallySignedTransactions,\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n      'Signed txns length',\n      signedTxns.length,\n      'vs handed in length',\n      instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n            successCallback(txid, i),\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log('Failed at txn index:', i);\n        console.log('Caught failure:', e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[] | Transaction,\n    signers: Keypair[],\n    awaitConfirmation = true,\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (!Array.isArray(instructions)) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n        block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n          // fee payed by the wallet owner\n          wallet.publicKey,\n          ...signers.map(s => s.publicKey),\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        DEFAULT_TIMEOUT,\n        connection,\n        commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[],\n    signers: Keypair[],\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n    beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n                                              signedTransaction,\n                                              connection,\n                                              timeout = DEFAULT_TIMEOUT,\n                                            }: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n      rawTransaction,\n      {\n        skipPreflight: true,\n      },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        timeout,\n        connection,\n        'recent',\n        true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n          await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n                'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n    connection: Connection,\n    transaction: Transaction,\n    commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n      // @ts-ignore\n      connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n    txid: TransactionSignature,\n    timeout: number,\n    connection: Connection,\n    commitment: Commitment = 'recent',\n    queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n          txid,\n          (result, context) => {\n            done = true;\n            status = {\n              err: result.err,\n              slot: context.slot,\n              confirmations: 0,\n            };\n            if (result.err) {\n              console.log('Rejected via websocket', result.err);\n              reject(status);\n            } else {\n              console.log('Resolved via websocket', result);\n              resolve(status);\n            }\n          },\n          commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"],"sourceRoot":""}